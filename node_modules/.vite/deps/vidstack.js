import {
  $$_attr,
  $$_clone,
  $$_create_component,
  $$_create_template,
  $$_insert_lite,
  $$_scoped,
  $$_setup_custom_element,
  AudioMenuButton,
  AudioMenuItems,
  AudioTrackList,
  BufferingIndicator,
  CaptionButton,
  Captions,
  CaptionsMenuButton,
  CaptionsMenuItems,
  ChaptersMenuItems,
  Component,
  ComponentController,
  FocusVisibleController,
  FullscreenButton,
  FullscreenController,
  Gesture,
  IS_IPHONE,
  Icon,
  LibASSTextRenderer,
  List,
  LiveIndicator,
  MEDIA_ATTRIBUTES,
  MEDIA_KEY_SHORTCUTS,
  MediaEventsLogger,
  MediaKeyboardController,
  MediaLoadController,
  MediaPlayerDelegate,
  MediaRemoteControl,
  MediaRequestContext,
  MediaRequestManager,
  MediaStateManager,
  MediaStoreFactory,
  MediaStoreSync,
  MediaUserController,
  Menu,
  MenuButton,
  MenuItems,
  MuteButton,
  Outlet,
  PIPButton,
  PlayButton,
  PlaybackRateMenuButton,
  PlaybackRateMenuItems,
  Poster,
  QualityMenuButton,
  QualityMenuItems,
  Radio,
  RadioGroup,
  ScreenOrientationController,
  SeekButton,
  Slider,
  SliderStoreFactory,
  SliderThumbnail,
  SliderValue,
  SliderVideo,
  TEXT_TRACK_CROSSORIGIN,
  TextRenderers,
  TextTrack,
  TextTrackList,
  Thumbnail,
  ThumbnailsLoader,
  Time,
  TimeRange,
  TimeSlider,
  ToggleButton,
  Tooltip,
  VideoQualityList,
  VolumeSlider,
  canFullscreen,
  clampNumber,
  defineElement,
  getTimeRangesEnd,
  getTimeRangesStart,
  isAudioProvider,
  isHLSProvider,
  isHTMLAudioElement,
  isHTMLMediaElement,
  isHTMLVideoElement,
  isTrackCaptionKind,
  isVideoProvider,
  mediaContext,
  mediaPlayerProps,
  method,
  prop,
  round,
  setAttributeIfEmpty,
  softResetMediaStore,
  toggleButtonProps,
  useMedia
} from "./chunk-Y6S2BEXD.js";
import {
  DOMEvent,
  appendTriggerEvent,
  camelToKebabCase,
  computed,
  createContext,
  deferredPromise,
  effect2 as effect,
  findTriggerEvent,
  getScope,
  hasTriggerEvent,
  isObject,
  isString,
  isUndefined,
  listenEvent,
  peek,
  provideContext,
  setAttribute,
  signal,
  uppercaseFirstChar,
  useContext,
  walkTriggerEventChain
} from "./chunk-HW7FGZZU.js";
import "./chunk-SYEICURH.js";
import "./chunk-M2RQ7CWB.js";
import {
  __publicField
} from "./chunk-4B2QHNJT.js";

// node_modules/vidstack/dist/dev/player.js
var GROUPED_LOG = Symbol("GROUPED_LOG");
var _a;
_a = GROUPED_LOG;
var _GroupedLog = class _GroupedLog {
  constructor(logger, level, title, root, parent) {
    __publicField(this, _a, true);
    __publicField(this, "logs", []);
    this.logger = logger;
    this.level = level;
    this.title = title;
    this.root = root;
    this.parent = parent;
  }
  log(...data) {
    this.logs.push({ data });
    return this;
  }
  labelledLog(label, ...data) {
    this.logs.push({ label, data });
    return this;
  }
  groupStart(title) {
    return new _GroupedLog(this.logger, this.level, title, this.root ?? this, this);
  }
  groupEnd() {
    var _a2;
    (_a2 = this.parent) == null ? void 0 : _a2.logs.push(this);
    return this.parent ?? this;
  }
  dispatch() {
    return this.logger.dispatch(this.level, this.root ?? this);
  }
};
var GroupedLog = _GroupedLog;
function isGroupedLog(data) {
  return isObject(data) && data[GROUPED_LOG];
}
var Logger = class {
  constructor() {
    __publicField(this, "_target", null);
  }
  error(...data) {
    return this.dispatch("error", ...data);
  }
  warn(...data) {
    return this.dispatch("warn", ...data);
  }
  info(...data) {
    return this.dispatch("info", ...data);
  }
  debug(...data) {
    return this.dispatch("debug", ...data);
  }
  errorGroup(title) {
    return new GroupedLog(this, "error", title);
  }
  warnGroup(title) {
    return new GroupedLog(this, "warn", title);
  }
  infoGroup(title) {
    return new GroupedLog(this, "info", title);
  }
  debugGroup(title) {
    return new GroupedLog(this, "debug", title);
  }
  setTarget(newTarget) {
    this._target = newTarget;
  }
  dispatch(level, ...data) {
    var _a2;
    return ((_a2 = this._target) == null ? void 0 : _a2.dispatchEvent(
      new DOMEvent("vds-log", {
        bubbles: true,
        composed: true,
        detail: { level, data }
      })
    )) || false;
  }
};
var LOCAL_STORAGE_KEY = "@vidstack/log-colors";
var savedColors = init();
function getLogColor(key) {
  return savedColors.get(key);
}
function saveLogColor(key, { color = generateColor(), overwrite = false } = {}) {
  if (!savedColors.has(key) || overwrite) {
    savedColors.set(key, color);
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(Object.entries(savedColors)));
  }
}
function generateColor() {
  return `hsl(${Math.random() * 360}, 55%, 70%)`;
}
function init() {
  let colors;
  try {
    colors = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));
  } catch {
  }
  return new Map(Object.entries(colors ?? {}));
}
var LogLevelValue = Object.freeze({
  silent: 0,
  error: 1,
  warn: 2,
  info: 3,
  debug: 4
});
var LogLevelColor = Object.freeze({
  silent: "white",
  error: "hsl(6, 58%, 50%)",
  warn: "hsl(51, 58%, 50%)",
  info: "hsl(219, 58%, 50%)",
  debug: "hsl(280, 58%, 50%)"
});
var s = 1e3;
var m = s * 60;
var h = m * 60;
var d = h * 24;
function ms(val) {
  const msAbs = Math.abs(val);
  if (msAbs >= d) {
    return Math.round(val / d) + "d";
  }
  if (msAbs >= h) {
    return Math.round(val / h) + "h";
  }
  if (msAbs >= m) {
    return Math.round(val / m) + "m";
  }
  if (msAbs >= s) {
    return Math.round(val / s) + "s";
  }
  return round(val, 2) + "ms";
}
var LogPrinter = class extends ComponentController {
  constructor() {
    super(...arguments);
    __publicField(this, "_level", "warn");
    __publicField(this, "_lastLogged");
  }
  /**
   * The current log level.
   */
  get logLevel() {
    return this._level;
  }
  set logLevel(level) {
    this._level = level;
  }
  onConnect() {
    this.listen("vds-log", (event) => {
      var _a2;
      event.stopPropagation();
      const eventTargetName = (((_a2 = event.path) == null ? void 0 : _a2[0]) ?? event.target).tagName.toLowerCase();
      const { level = "warn", data } = event.detail ?? {};
      if (LogLevelValue[this._level] < LogLevelValue[level]) {
        return;
      }
      saveLogColor(eventTargetName);
      const hint = (data == null ? void 0 : data.length) === 1 && isGroupedLog(data[0]) ? data[0].title : isString(data == null ? void 0 : data[0]) ? data[0] : "";
      console.groupCollapsed(
        `%c${level.toUpperCase()}%c ${eventTargetName}%c ${hint.slice(0, 50)}${hint.length > 50 ? "..." : ""}`,
        `background: ${LogLevelColor[level]}; color: white; padding: 1.5px 2.2px; border-radius: 2px; font-size: 11px;`,
        `color: ${getLogColor(eventTargetName)}; padding: 4px 0px; font-size: 11px;`,
        "color: gray; font-size: 11px; padding-left: 4px;"
      );
      if ((data == null ? void 0 : data.length) === 1 && isGroupedLog(data[0])) {
        printGroup(level, data[0]);
      } else if (data) {
        print(level, ...data);
      }
      this._printTimeDiff();
      printStackTrace();
      console.groupEnd();
    });
    return () => {
      this._lastLogged = void 0;
    };
  }
  _printTimeDiff() {
    labelledPrint("Time since last log", this._calcLastLogTimeDiff());
  }
  _calcLastLogTimeDiff() {
    const time = performance.now();
    const diff = time - (this._lastLogged ?? (this._lastLogged = performance.now()));
    this._lastLogged = time;
    return ms(diff);
  }
};
function print(level, ...data) {
  console[level](...data);
}
function labelledPrint(label, ...data) {
  console.log(`%c${label}:`, "color: gray", ...data);
}
function printStackTrace() {
  console.groupCollapsed("%cStack Trace", "color: gray");
  console.trace();
  console.groupEnd();
}
function printGroup(level, groupedLog) {
  console.groupCollapsed(groupedLog.title);
  for (const log of groupedLog.logs) {
    if (isGroupedLog(log)) {
      printGroup(level, log);
    } else if ("label" in log && !isUndefined(log.label)) {
      labelledPrint(log.label, ...log.data);
    } else {
      print(level, ...log.data);
    }
  }
  console.groupEnd();
}
var RequestQueue = class {
  constructor() {
    __publicField(this, "_serving", false);
    __publicField(this, "_pending", deferredPromise());
    __publicField(this, "_queue", /* @__PURE__ */ new Map());
  }
  /**
   * The number of callbacks that are currently in queue.
   */
  get _size() {
    return this._queue.size;
  }
  /**
   * Whether items in the queue are being served immediately, otherwise they're queued to
   * be processed later.
   */
  get _isServing() {
    return this._serving;
  }
  /**
   * Waits for the queue to be flushed (ie: start serving).
   */
  async _waitForFlush() {
    if (this._serving)
      return;
    await this._pending.promise;
  }
  /**
   * Queue the given `callback` to be invoked at a later time by either calling the `serve()` or
   * `start()` methods. If the queue has started serving (i.e., `start()` was already called),
   * then the callback will be invoked immediately.
   *
   * @param key - Uniquely identifies this callback so duplicates are ignored.
   * @param callback - The function to call when this item in the queue is being served.
   */
  _enqueue(key, callback) {
    if (this._serving) {
      callback();
      return;
    }
    this._queue.delete(key);
    this._queue.set(key, callback);
  }
  /**
   * Invokes the callback with the given `key` in the queue (if it exists).
   */
  _serve(key) {
    var _a2;
    (_a2 = this._queue.get(key)) == null ? void 0 : _a2();
    this._queue.delete(key);
  }
  /**
   * Flush all queued items and start serving future requests immediately until `stop()` is called.
   */
  _start() {
    this._flush();
    this._serving = true;
    if (this._queue.size > 0)
      this._flush();
  }
  /**
   * Stop serving requests, they'll be queued until you begin processing again by calling `start()`.
   */
  _stop() {
    this._serving = false;
  }
  /**
   * Stop serving requests, empty the request queue, and release any promises waiting for the
   * queue to flush.
   */
  _reset() {
    this._stop();
    this._queue.clear();
    this._release();
  }
  _flush() {
    for (const key of this._queue.keys())
      this._serve(key);
    this._release();
  }
  _release() {
    this._pending.resolve();
    this._pending = deferredPromise();
  }
};
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
var Player = class extends Component {
  constructor(instance) {
    super(instance);
    __publicField(this, "_media");
    __publicField(this, "_stateMgr");
    __publicField(this, "_requestMgr");
    __publicField(this, "_canPlayQueue", new RequestQueue());
    __publicField(this, "orientation");
    this._initStore();
    new MediaStoreSync(instance);
    const context = {
      player: null,
      scope: getScope(),
      qualities: new VideoQualityList(),
      audioTracks: new AudioTrackList(),
      $provider: signal(null),
      $props: this.$props,
      $store: this.$store
    };
    {
      const logPrinter = new LogPrinter(instance);
      effect(() => {
        logPrinter.logLevel = this.$props.logLevel();
      });
    }
    context.logger = new Logger();
    context.remote = new MediaRemoteControl(context.logger);
    context.$iosControls = computed(this._isIOSControls.bind(this));
    context.textTracks = new TextTrackList();
    context.textTracks[TEXT_TRACK_CROSSORIGIN] = this.$props.crossorigin;
    context.textRenderers = new TextRenderers(context);
    context.ariaKeys = {};
    this._media = context;
    provideContext(mediaContext, context);
    this.orientation = new ScreenOrientationController(instance);
    new FocusVisibleController(instance);
    new MediaKeyboardController(instance, context);
    new ThumbnailsLoader(instance);
    new MediaEventsLogger(instance, context);
    const request = new MediaRequestContext();
    this._stateMgr = new MediaStateManager(instance, request, context);
    this._requestMgr = new MediaRequestManager(instance, this._stateMgr, request, context);
    context.delegate = new MediaPlayerDelegate(
      this._stateMgr._handle.bind(this._stateMgr),
      context
    );
    new MediaLoadController(instance, this.startLoading.bind(this));
  }
  get _provider() {
    return this._media.$provider();
  }
  onAttach(el) {
    el.setAttribute("tabindex", "0");
    setAttributeIfEmpty(el, "role", "region");
    effect(this._watchTitle.bind(this));
    effect(this._watchOrientation.bind(this));
    effect(this._watchCanPlay.bind(this));
    effect(this._watchMuted.bind(this));
    effect(this._watchPaused.bind(this));
    effect(this._watchVolume.bind(this));
    effect(this._watchCurrentTime.bind(this));
    effect(this._watchPlaysinline.bind(this));
    effect(this._watchPlaybackRate.bind(this));
    this._setMediaAttributes();
    this._setMediaVars();
    this._media.player = el;
    this._media.remote.setTarget(el);
    this._media.remote.setPlayer(el);
    listenEvent(el, "find-media-player", this._onFindPlayer.bind(this));
  }
  onConnect(el) {
    if (IS_IPHONE)
      setAttribute(el, "data-iphone", "");
    const pointerQuery = window.matchMedia("(pointer: coarse)");
    this._onTouchChange(pointerQuery);
    pointerQuery.onchange = this._onTouchChange.bind(this);
    const resize = new ResizeObserver(this._onResize.bind(this));
    resize.observe(el);
    effect(this._onResize.bind(this));
    this.dispatch("media-player-connect", {
      detail: this.el,
      bubbles: true,
      composed: true
    });
    {
      this._media.logger.setTarget(el);
      return () => this._media.logger.setTarget(null);
    }
  }
  _initStore() {
    var _a2;
    const providedProps = {
      viewType: "providedViewType",
      streamType: "providedStreamType"
    };
    for (const prop2 of Object.keys(this.$props)) {
      (_a2 = this.$store[providedProps[prop2] ?? prop2]) == null ? void 0 : _a2.set(this.$props[prop2]());
    }
    effect(this._onProvidedTypesChange.bind(this));
    this.$store.muted.set(this.$props.muted() || this.$props.volume() === 0);
  }
  _watchTitle() {
    var _a2, _b, _c;
    const { title } = this.$props, { live, viewType } = this.$store, isLive = live(), type = uppercaseFirstChar(viewType()), typeText = type !== "Unknown" ? `${isLive ? "Live " : ""}${type}` : isLive ? "Live" : "Media";
    const newTitle = title();
    if (newTitle) {
      (_a2 = this.el) == null ? void 0 : _a2.setAttribute("data-title", newTitle);
      (_b = this.el) == null ? void 0 : _b.removeAttribute("title");
    }
    const currentTitle = ((_c = this.el) == null ? void 0 : _c.getAttribute("data-title")) || "";
    this.$store.title.set(currentTitle);
    setAttribute(
      this.el,
      "aria-label",
      currentTitle ? `${typeText} - ${currentTitle}` : typeText + " Player"
    );
  }
  _watchOrientation() {
    const orientation = this.orientation.landscape ? "landscape" : "portrait";
    this.$store.orientation.set(orientation);
    setAttribute(this.el, "data-orientation", orientation);
    this._onResize();
  }
  _watchCanPlay() {
    if (this.$store.canPlay() && this._provider)
      this._canPlayQueue._start();
    else
      this._canPlayQueue._stop();
  }
  _onProvidedTypesChange() {
    this.$store.providedViewType.set(this.$props.viewType());
    this.$store.providedStreamType.set(this.$props.streamType());
  }
  _setMediaAttributes() {
    const $attrs = {
      "aspect-ratio": this.$props.aspectRatio,
      "data-captions": () => {
        const track = this.$store.textTrack();
        return !!track && isTrackCaptionKind(track);
      },
      "data-ios-controls": this._media.$iosControls
    };
    const mediaAttrName = {
      canPictureInPicture: "can-pip",
      pictureInPicture: "pip"
    };
    for (const prop2 of MEDIA_ATTRIBUTES) {
      const attrName = "data-" + (mediaAttrName[prop2] ?? camelToKebabCase(prop2));
      $attrs[attrName] = this.$store[prop2];
    }
    delete $attrs.title;
    this.setAttributes($attrs);
  }
  _setMediaVars() {
    this.setCSSVars({
      "--media-aspect-ratio": () => {
        const ratio = this.$props.aspectRatio();
        return ratio ? +ratio.toFixed(4) : null;
      }
    });
  }
  _onFindPlayer(event) {
    event.detail(this.el);
  }
  _onResize() {
    if (!this.el)
      return;
    const width = this.el.clientWidth, height = this.el.clientHeight, { smallBreakpointX, smallBreakpointY, largeBreakpointX, largeBreakpointY } = this.$props, bpx = width < smallBreakpointX() ? "sm" : width < largeBreakpointX() ? "md" : "lg", bpy = height < smallBreakpointY() ? "sm" : height < largeBreakpointY() ? "md" : "lg";
    this.$store.breakpointX.set(bpx);
    this.$store.breakpointY.set(bpy);
    setAttribute(this.el, "data-bp-x", bpx);
    setAttribute(this.el, "data-bp-y", bpy);
  }
  _onTouchChange(queryList) {
    const isTouch = queryList.matches;
    setAttribute(this.el, "data-touch", isTouch);
    this.$store.touchPointer.set(isTouch);
    this._onResize();
  }
  _isIOSControls() {
    return !canFullscreen() && this.$store.mediaType() === "video" && (this.$store.controls() && !this.$props.playsinline() || this.$store.fullscreen());
  }
  get provider() {
    return this._provider;
  }
  get user() {
    return this._requestMgr._user;
  }
  get qualities() {
    return this._media.qualities;
  }
  get audioTracks() {
    return this._media.audioTracks;
  }
  get textTracks() {
    return this._media.textTracks;
  }
  get textRenderers() {
    return this._media.textRenderers;
  }
  get paused() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.paused) ?? true;
  }
  set paused(paused) {
    if (paused) {
      this._canPlayQueue._enqueue("paused", () => this._requestMgr._pause());
    } else
      this._canPlayQueue._enqueue("paused", () => this._requestMgr._play());
  }
  _watchPaused() {
    this.paused = this.$props.paused();
  }
  get muted() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.muted) ?? false;
  }
  set muted(muted) {
    this._canPlayQueue._enqueue("muted", () => this._provider.muted = muted);
  }
  _watchMuted() {
    this.muted = this.$props.muted();
  }
  get currentTime() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.currentTime) ?? 0;
  }
  set currentTime(time) {
    this._canPlayQueue._enqueue("currentTime", () => {
      const adapter = this._provider;
      if (time !== adapter.currentTime) {
        peek(() => {
          const boundTime = Math.min(
            Math.max(this.$store.seekableStart() + 0.1, time),
            this.$store.seekableEnd() - 0.1
          );
          if (Number.isFinite(boundTime))
            adapter.currentTime = boundTime;
        });
      }
    });
  }
  _watchCurrentTime() {
    this.currentTime = this.$props.currentTime();
  }
  get volume() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.volume) ?? 1;
  }
  set volume(volume) {
    this._canPlayQueue._enqueue("volume", () => this._provider.volume = volume);
  }
  _watchVolume() {
    this.volume = clampNumber(0, this.$props.volume(), 1);
  }
  get playsinline() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.playsinline) ?? false;
  }
  set playsinline(inline) {
    this._canPlayQueue._enqueue("playsinline", () => this._provider.playsinline = inline);
  }
  _watchPlaysinline() {
    this.playsinline = this.$props.playsinline();
  }
  get playbackRate() {
    var _a2;
    return ((_a2 = this._provider) == null ? void 0 : _a2.playbackRate) ?? 1;
  }
  set playbackRate(rate) {
    this._canPlayQueue._enqueue("rate", () => this._provider.playbackRate = rate);
  }
  _watchPlaybackRate() {
    this.playbackRate = this.$props.playbackRate();
  }
  async play() {
    return this._requestMgr._play();
  }
  async pause() {
    return this._requestMgr._pause();
  }
  async enterFullscreen(target) {
    return this._requestMgr._enterFullscreen(target);
  }
  async exitFullscreen(target) {
    return this._requestMgr._exitFullscreen(target);
  }
  enterPictureInPicture() {
    return this._requestMgr._enterPictureInPicture();
  }
  exitPictureInPicture() {
    return this._requestMgr._exitPictureInPicture();
  }
  seekToLiveEdge() {
    this._requestMgr._seekToLiveEdge();
  }
  startLoading() {
    this._media.delegate._dispatch("can-load");
  }
  destroy() {
    this.dispatch("destroy");
  }
};
__publicField(Player, "el", defineElement({
  tagName: "media-player",
  props: mediaPlayerProps,
  store: MediaStoreFactory
}));
__decorateClass([
  prop
], Player.prototype, "provider", 1);
__decorateClass([
  prop
], Player.prototype, "user", 1);
__decorateClass([
  prop
], Player.prototype, "orientation", 2);
__decorateClass([
  prop
], Player.prototype, "qualities", 1);
__decorateClass([
  prop
], Player.prototype, "audioTracks", 1);
__decorateClass([
  prop
], Player.prototype, "textTracks", 1);
__decorateClass([
  prop
], Player.prototype, "textRenderers", 1);
__decorateClass([
  prop
], Player.prototype, "paused", 1);
__decorateClass([
  prop
], Player.prototype, "muted", 1);
__decorateClass([
  prop
], Player.prototype, "currentTime", 1);
__decorateClass([
  prop
], Player.prototype, "volume", 1);
__decorateClass([
  prop
], Player.prototype, "playsinline", 1);
__decorateClass([
  prop
], Player.prototype, "playbackRate", 1);
__decorateClass([
  method
], Player.prototype, "play", 1);
__decorateClass([
  method
], Player.prototype, "pause", 1);
__decorateClass([
  method
], Player.prototype, "enterFullscreen", 1);
__decorateClass([
  method
], Player.prototype, "exitFullscreen", 1);
__decorateClass([
  method
], Player.prototype, "enterPictureInPicture", 1);
__decorateClass([
  method
], Player.prototype, "exitPictureInPicture", 1);
__decorateClass([
  method
], Player.prototype, "seekToLiveEdge", 1);
__decorateClass([
  method
], Player.prototype, "startLoading", 1);

// node_modules/vidstack/dist/dev/media-community-skin.js
function getUIComponents() {
  return [
    Poster,
    BufferingIndicator,
    Tooltip,
    Thumbnail,
    PlayButton,
    MuteButton,
    PIPButton,
    FullscreenButton,
    CaptionButton,
    SeekButton,
    Slider,
    TimeSlider,
    VolumeSlider,
    SliderThumbnail,
    SliderValue,
    SliderVideo,
    Time,
    ToggleButton,
    LiveIndicator,
    Captions,
    Gesture,
    Menu,
    MenuButton,
    MenuItems,
    RadioGroup,
    Radio,
    AudioMenuButton,
    AudioMenuItems,
    CaptionsMenuButton,
    CaptionsMenuItems,
    ChaptersMenuItems,
    QualityMenuButton,
    QualityMenuItems,
    PlaybackRateMenuButton,
    PlaybackRateMenuItems
  ];
}
var Icon$15 = `<path d="M16.6927 25.3346C16.3245 25.3346 16.026 25.0361 16.026 24.6679L16.026 7.3346C16.026 6.96641 16.3245 6.66794 16.6927 6.66794L18.6927 6.66794C19.0609 6.66794 19.3594 6.96642 19.3594 7.3346L19.3594 24.6679C19.3594 25.0361 19.0609 25.3346 18.6927 25.3346H16.6927Z" fill="currentColor"/> <path d="M24.026 25.3346C23.6578 25.3346 23.3594 25.0361 23.3594 24.6679L23.3594 7.3346C23.3594 6.96641 23.6578 6.66794 24.026 6.66794L26.026 6.66794C26.3942 6.66794 26.6927 6.96642 26.6927 7.3346V24.6679C26.6927 25.0361 26.3942 25.3346 26.026 25.3346H24.026Z" fill="currentColor"/> <path d="M5.48113 23.9407C5.38584 24.2963 5.59689 24.6619 5.95254 24.7572L7.88439 25.2748C8.24003 25.3701 8.60559 25.159 8.70089 24.8034L13.1871 8.06067C13.2824 7.70503 13.0713 7.33947 12.7157 7.24417L10.7838 6.72654C10.4282 6.63124 10.0626 6.8423 9.96733 7.19794L5.48113 23.9407Z" fill="currentColor"/>`;
var Icon$74 = `<path d="M16.6667 10.3452C16.6667 10.8924 16.0439 11.2066 15.6038 10.8814L11.0766 7.5364C10.7159 7.26993 10.7159 6.73054 11.0766 6.46405L15.6038 3.11873C16.0439 2.79356 16.6667 3.10773 16.6667 3.6549V5.22682C16.6667 5.29746 16.7223 5.35579 16.7927 5.36066C22.6821 5.76757 27.3333 10.674 27.3333 16.6667C27.3333 22.9259 22.2592 28 16 28C9.96483 28 5.03145 23.2827 4.68601 17.3341C4.66466 16.9665 4.96518 16.6673 5.33339 16.6673H7.3334C7.70157 16.6673 7.99714 16.9668 8.02743 17.3337C8.36638 21.4399 11.8064 24.6667 16 24.6667C20.4183 24.6667 24 21.085 24 16.6667C24 12.5225 20.8483 9.11428 16.8113 8.70739C16.7337 8.69957 16.6667 8.76096 16.6667 8.83893V10.3452Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0226 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4279 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0993 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0832 15.4782 19.2015 15.6828 19.2868 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z" fill="currentColor"/> <path d="M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z" fill="currentColor"/>`;
var Icon$78 = `<path d="M15.3333 10.3452C15.3333 10.8924 15.9561 11.2066 16.3962 10.8814L20.9234 7.5364C21.2841 7.26993 21.2841 6.73054 20.9235 6.46405L16.3962 3.11873C15.9561 2.79356 15.3333 3.10773 15.3333 3.6549V5.22682C15.3333 5.29746 15.2778 5.35579 15.2073 5.36066C9.31791 5.76757 4.66667 10.674 4.66667 16.6667C4.66667 22.9259 9.74078 28 16 28C22.0352 28 26.9686 23.2827 27.314 17.3341C27.3354 16.9665 27.0348 16.6673 26.6666 16.6673H24.6666C24.2984 16.6673 24.0029 16.9668 23.9726 17.3337C23.6336 21.4399 20.1937 24.6667 16 24.6667C11.5817 24.6667 8 21.085 8 16.6667C8 12.5225 11.1517 9.11428 15.1887 8.70739C15.2663 8.69957 15.3333 8.76096 15.3333 8.83893V10.3452Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0225 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4278 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0992 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0831 15.4782 19.2015 15.6828 19.2867 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z" fill="currentColor"/> <path d="M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z" fill="currentColor"/>`;
var Icon$85 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M13.5722 5.33333C13.2429 5.33333 12.9629 5.57382 12.9132 5.89938L12.4063 9.21916C12.4 9.26058 12.3746 9.29655 12.3378 9.31672C12.2387 9.37118 12.1409 9.42779 12.0444 9.48648C12.0086 9.5083 11.9646 9.51242 11.9255 9.49718L8.79572 8.27692C8.48896 8.15732 8.14083 8.27958 7.9762 8.56472L5.5491 12.7686C5.38444 13.0538 5.45271 13.4165 5.70981 13.6223L8.33308 15.7225C8.3658 15.7487 8.38422 15.7887 8.38331 15.8306C8.38209 15.8867 8.38148 15.9429 8.38148 15.9993C8.38148 16.0558 8.3821 16.1121 8.38332 16.1684C8.38423 16.2102 8.36582 16.2503 8.33313 16.2765L5.7103 18.3778C5.45334 18.5836 5.38515 18.9462 5.54978 19.2314L7.97688 23.4352C8.14155 23.7205 8.48981 23.8427 8.79661 23.723L11.926 22.5016C11.9651 22.4864 12.009 22.4905 12.0449 22.5123C12.1412 22.5709 12.2388 22.6274 12.3378 22.6818C12.3745 22.7019 12.4 22.7379 12.4063 22.7793L12.9132 26.0993C12.9629 26.4249 13.2429 26.6654 13.5722 26.6654H18.4264C18.7556 26.6654 19.0356 26.425 19.0854 26.0995L19.5933 22.7801C19.5997 22.7386 19.6252 22.7027 19.6619 22.6825C19.7614 22.6279 19.8596 22.5711 19.9564 22.5121C19.9923 22.4903 20.0362 22.4862 20.0754 22.5015L23.2035 23.7223C23.5103 23.842 23.8585 23.7198 24.0232 23.4346L26.4503 19.2307C26.6149 18.9456 26.5467 18.583 26.2898 18.3771L23.6679 16.2766C23.6352 16.2504 23.6168 16.2104 23.6177 16.1685C23.619 16.1122 23.6196 16.0558 23.6196 15.9993C23.6196 15.9429 23.619 15.8866 23.6177 15.8305C23.6168 15.7886 23.6353 15.7486 23.668 15.7224L26.2903 13.623C26.5474 13.4172 26.6156 13.0544 26.451 12.7692L24.0239 8.56537C23.8592 8.28023 23.5111 8.15797 23.2043 8.27757L20.0758 9.49734C20.0367 9.51258 19.9927 9.50846 19.9569 9.48664C19.8599 9.42762 19.7616 9.37071 19.6618 9.31596C19.6251 9.2958 19.5997 9.25984 19.5933 9.21843L19.0854 5.89915C19.0356 5.57369 18.7556 5.33333 18.4264 5.33333H13.5722ZM16.0001 20.2854C18.3672 20.2854 20.2862 18.3664 20.2862 15.9993C20.2862 13.6322 18.3672 11.7132 16.0001 11.7132C13.6329 11.7132 11.714 13.6322 11.714 15.9993C11.714 18.3664 13.6329 20.2854 16.0001 20.2854Z" fill="currentColor"/>`;
function i18n(translations, key) {
  var _a2;
  return ((_a2 = translations()) == null ? void 0 : _a2[key]) ?? key;
}
var communitySkinContext = createContext();
function useCommunitySkin() {
  return useContext(communitySkinContext);
}
function useCommunitySkinI18n() {
  return useCommunitySkin().$props.translations;
}
var $$_templ$2 = $$_create_template(`<media-play-button default-appearance="" mk-d><media-tooltip mk-d><span slot="play"></span><span slot="pause"></span></media-tooltip></media-play-button>`);
var $$_templ_2$2 = $$_create_template(`<media-mute-button default-appearance="" mk-d><media-tooltip mk-d><span slot="mute"></span><span slot="unmute"></span></media-tooltip></media-mute-button>`);
var $$_templ_3 = $$_create_template(`<media-caption-button default-appearance="" mk-d><media-tooltip mk-d><span slot="on"></span><span slot="off"></span></media-tooltip></media-caption-button>`);
var $$_templ_4 = $$_create_template(`<media-pip-button default-appearance="" mk-d><media-tooltip mk-d><span slot="enter"></span><span slot="exit"></span></media-tooltip></media-pip-button>`);
var $$_templ_5 = $$_create_template(`<media-fullscreen-button default-appearance="" mk-d><media-tooltip position="top right" mk-d><span slot="enter"></span><span slot="exit"></span></media-tooltip></media-fullscreen-button>`);
var $$_templ_6 = $$_create_template(`<media-seek-button mk-d><media-tooltip mk-d><span></span></media-tooltip></media-seek-button>`);
var $$_templ_7 = $$_create_template(`<media-volume-slider mk-d><media-slider-value type="pointer" format="percent" slot="preview" mk-d></media-slider-value></media-volume-slider>`);
var $$_templ_8 = $$_create_template(`<span part="main-title"></span>`);
var $$_templ_9 = $$_templ_8;
var $$_templ_10 = $$_create_template(`<media-menu part="chapters-menu" mk-d><media-menu-button mk-d><media-tooltip mk-d></media-tooltip></media-menu-button><media-chapters-menu-items mk-d></media-chapters-menu-items></media-menu>`);
var $$_templ_11 = $$_create_template(`<media-menu part="settings-menu" mk-d><media-menu-button mk-d><media-tooltip mk-d></media-tooltip></media-menu-button><media-menu-items mk-d><media-menu mk-d><media-audio-menu-button mk-d></media-audio-menu-button><media-audio-menu-items mk-d></media-audio-menu-items></media-menu><media-menu mk-d><media-playback-rate-menu-button mk-d></media-playback-rate-menu-button><media-playback-rate-menu-items mk-d></media-playback-rate-menu-items></media-menu><media-menu mk-d><media-quality-menu-button mk-d></media-quality-menu-button><media-quality-menu-items mk-d></media-quality-menu-items></media-menu><media-menu mk-d><media-captions-menu-button mk-d></media-captions-menu-button><media-captions-menu-items mk-d></media-captions-menu-items></media-menu></media-menu-items></media-menu>`);
var $$_templ_12 = $$_create_template(`<div part="gestures"><media-gesture event="pointerup" action="toggle:paused" mk-d></media-gesture><media-gesture event="pointerup" action="toggle:user-idle" mk-d></media-gesture><media-gesture event="dblpointerup" action="toggle:fullscreen" mk-d></media-gesture><media-gesture event="dblpointerup" action="seek:-10" mk-d></media-gesture><media-gesture event="dblpointerup" action="seek:10" mk-d></media-gesture></div>`);
var $$_templ_13 = $$_create_template(`<media-time-slider mk-d><div slot="preview"><media-slider-thumbnail mk-d></media-slider-thumbnail><div part="chapter-title"></div><media-slider-value type="pointer" format="time" mk-d></media-slider-value></div></media-time-slider>`);
var $$_templ_14 = $$_create_template(`<div part="time-group"><media-time type="current" mk-d></media-time><div part="time-divider">/</div><media-time type="duration" mk-d></media-time></div>`);
function PlayButton2({
  part,
  tooltip = "top left"
}) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ$2), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
    $$_attr($$_root, "part", part);
    $$_scoped(() => {
      $$_attr($$_el, "position", tooltip);
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, "Play"));
        $$_insert_lite($$_el_3, () => i18n(lang, "Pause"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function MuteButton2({ tooltip = "top center" }) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_2$2), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
    $$_scoped(() => {
      $$_attr($$_el, "position", tooltip);
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, "Mute"));
        $$_insert_lite($$_el_3, () => i18n(lang, "Unmute"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function CaptionButton2({ tooltip = "top center" }) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_3), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
    $$_scoped(() => {
      $$_attr($$_el, "position", tooltip);
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, "Closed-Captions On"));
        $$_insert_lite($$_el_3, () => i18n(lang, "Closed-Captions Off"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function PiPButton() {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_4), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
    $$_scoped(() => {
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, "Enter PiP"));
        $$_insert_lite($$_el_3, () => i18n(lang, "Exit PiP"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function FullscreenButton2() {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_5), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
    $$_scoped(() => {
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, "Enter Fullscreen"));
        $$_insert_lite($$_el_3, () => i18n(lang, "Exit Fullscreen"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function SeekButton2({
  seconds,
  tooltip = "top center"
}) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_6), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild;
    $$_attr($$_root, "seconds", seconds);
    $$_scoped(() => {
      $$_insert_lite(
        $$_root,
        $$_create_component(Icon, { paths: seconds >= 0 ? Icon$78 : Icon$74 }),
        $$_el
      );
      $$_attr($$_el, "position", tooltip);
      $$_scoped(() => {
        $$_insert_lite($$_el_2, () => i18n(lang, seconds >= 0 ? "Seek Forward" : "Seek Backward"));
      }, $$_setup_custom_element($$_el));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function VolumeSlider2() {
  return (() => {
    const $$_root = $$_clone($$_templ_7), $$_el = $$_root.firstChild;
    $$_scoped(() => {
      $$_setup_custom_element($$_el);
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function ChapterTitleOrMainTitle() {
  const {
    $media: { title, textTracks, started }
  } = useCommunitySkin();
  const chapterTitle = signal(""), mainTitle = computed(() => started() ? chapterTitle() || title() : title());
  effect(() => {
    const track = textTracks().find(
      (track2) => track2.kind === "chapters" && track2.mode === "showing"
    );
    track && listenEvent(track, "cue-change", () => {
      var _a2;
      chapterTitle.set(((_a2 = track.activeCues[0]) == null ? void 0 : _a2.text) || "");
    });
    return () => chapterTitle.set("");
  });
  return (() => {
    const $$_root = $$_clone($$_templ_9);
    $$_insert_lite($$_root, mainTitle);
    return $$_root;
  })();
}
function ChaptersMenu({
  position = "bottom",
  tooltip = "bottom center"
}) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_10), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el.nextSibling;
    $$_attr($$_root, "position", position);
    $$_scoped(() => {
      $$_scoped(() => {
        $$_insert_lite($$_el, $$_create_component(Icon, { paths: Icon$15 }), $$_el_2);
        $$_attr($$_el_2, "position", tooltip);
        $$_scoped(() => {
          $$_insert_lite($$_el_2, () => i18n(lang, "Chapters"));
        }, $$_setup_custom_element($$_el_2));
      }, $$_setup_custom_element($$_el));
      $$_setup_custom_element($$_el_3);
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function SettingsMenu({
  position = "bottom",
  tooltip = "bottom right"
}) {
  const lang = useCommunitySkinI18n();
  return (() => {
    const $$_root = $$_clone($$_templ_11), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el.nextSibling, $$_el_4 = $$_el_3.firstChild, $$_el_5 = $$_el_4.firstChild, $$_el_6 = $$_el_5.nextSibling, $$_el_7 = $$_el_4.nextSibling, $$_el_8 = $$_el_7.firstChild, $$_el_9 = $$_el_8.nextSibling, $$_el_10 = $$_el_7.nextSibling, $$_el_11 = $$_el_10.firstChild, $$_el_12 = $$_el_11.nextSibling, $$_el_13 = $$_el_10.nextSibling, $$_el_14 = $$_el_13.firstChild, $$_el_15 = $$_el_14.nextSibling;
    $$_attr($$_root, "position", position);
    $$_scoped(() => {
      $$_scoped(() => {
        $$_insert_lite($$_el, $$_create_component(Icon, { paths: Icon$85, rotate: true }), $$_el_2);
        $$_attr($$_el_2, "position", tooltip);
        $$_scoped(() => {
          $$_insert_lite($$_el_2, () => i18n(lang, "Settings"));
        }, $$_setup_custom_element($$_el_2));
      }, $$_setup_custom_element($$_el));
      $$_scoped(() => {
        $$_scoped(() => {
          $$_setup_custom_element($$_el_5, { label: () => i18n(lang, "Audio") });
          $$_setup_custom_element($$_el_6, { emptyLabel: () => i18n(lang, "Default") });
        }, $$_setup_custom_element($$_el_4));
        $$_scoped(() => {
          $$_setup_custom_element($$_el_8, { label: () => i18n(lang, "Speed") });
          $$_setup_custom_element($$_el_9, { normalLabel: () => i18n(lang, "Normal") });
        }, $$_setup_custom_element($$_el_7));
        $$_scoped(() => {
          $$_setup_custom_element($$_el_11, { label: () => i18n(lang, "Quality") });
          $$_setup_custom_element($$_el_12, { autoLabel: () => i18n(lang, "Auto") });
        }, $$_setup_custom_element($$_el_10));
        $$_scoped(() => {
          $$_setup_custom_element($$_el_14, { label: () => i18n(lang, "Captions") });
          $$_setup_custom_element($$_el_15, { offLabel: () => i18n(lang, "Off") });
        }, $$_setup_custom_element($$_el_13));
      }, $$_setup_custom_element($$_el_3));
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function VideoGestures() {
  return (() => {
    const $$_root = $$_clone($$_templ_12), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.nextSibling, $$_el_4 = $$_el_3.nextSibling, $$_el_5 = $$_el_4.nextSibling;
    $$_setup_custom_element($$_el);
    $$_setup_custom_element($$_el_2);
    $$_setup_custom_element($$_el_3);
    $$_setup_custom_element($$_el_4);
    $$_setup_custom_element($$_el_5);
    return $$_root;
  })();
}
function TimeSlider2() {
  return (() => {
    const $$_root = $$_clone($$_templ_13), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling, $$_el_4 = $$_el_3.nextSibling;
    $$_scoped(() => {
      $$_setup_custom_element($$_el_2);
      $$_setup_custom_element($$_el_4);
    }, $$_setup_custom_element($$_root));
    return $$_root;
  })();
}
function TimeGroup() {
  return (() => {
    const $$_root = $$_clone($$_templ_14), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.nextSibling;
    $$_setup_custom_element($$_el);
    $$_setup_custom_element($$_el_3);
    return $$_root;
  })();
}
var $$_templ$1 = $$_create_template(`<div part="media-ui aod live:dvr mobile"><media-captions mk-d></media-captions><div part="controls"><div part="controls-group"></div><div part="controls-group"></div><div part="controls-group"><media-time type="current" mk-d></media-time><div part="controls-spacer"></div><media-time type="duration" mk-d></media-time></div><div part="controls-group"><div part="controls-spacer"></div><div part="controls-spacer"></div></div></div></div>`);
var $$_templ_2$1 = $$_create_template(`<div part="media-ui aod live:dvr desktop"><media-captions mk-d></media-captions><div part="controls"><div part="controls-group"></div><div part="controls-group"></div></div></div>`);
function renderAudio(isMobile) {
  return isMobile ? MobileUI$1() : DesktopUI$1();
}
function MobileUI$1() {
  return (() => {
    const $$_root = $$_clone($$_templ$1), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.firstChild, $$_el_4 = $$_el_3.nextSibling, $$_el_5 = $$_el_4.nextSibling, $$_el_6 = $$_el_5.firstChild, $$_el_7 = $$_el_6.nextSibling, $$_el_8 = $$_el_7.nextSibling, $$_el_9 = $$_el_5.nextSibling, $$_el_10 = $$_el_9.firstChild, $$_el_11 = $$_el_10.nextSibling;
    $$_setup_custom_element($$_el);
    $$_insert_lite($$_el_3, $$_create_component(MuteButton2, { tooltip: "top left" }), null);
    $$_insert_lite($$_el_3, $$_create_component(ChapterTitleOrMainTitle), null);
    $$_insert_lite($$_el_3, $$_create_component(CaptionButton2), null);
    $$_insert_lite($$_el_3, $$_create_component(ChaptersMenu, { tooltip: "top center", position: "top" }), null);
    $$_insert_lite($$_el_3, $$_create_component(SettingsMenu, { tooltip: "top right", position: "top" }), null);
    $$_insert_lite($$_el_4, $$_create_component(TimeSlider2));
    $$_setup_custom_element($$_el_6);
    $$_setup_custom_element($$_el_8);
    $$_insert_lite($$_el_9, $$_create_component(SeekButton2, { seconds: -10, tooltip: "top left" }), $$_el_11);
    $$_insert_lite($$_el_9, $$_create_component(PlayButton2, { tooltip: "top center" }), $$_el_11);
    $$_insert_lite($$_el_9, $$_create_component(SeekButton2, { seconds: 10 }), $$_el_11);
    return $$_root;
  })();
}
function DesktopUI$1() {
  return (() => {
    const $$_root = $$_clone($$_templ_2$1), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.firstChild, $$_el_4 = $$_el_3.nextSibling;
    $$_setup_custom_element($$_el);
    $$_insert_lite($$_el_3, $$_create_component(TimeSlider2));
    $$_insert_lite($$_el_4, $$_create_component(SeekButton2, { seconds: -10, tooltip: "top left" }), null);
    $$_insert_lite($$_el_4, $$_create_component(PlayButton2, { tooltip: "top center" }), null);
    $$_insert_lite($$_el_4, $$_create_component(SeekButton2, { seconds: 10 }), null);
    $$_insert_lite($$_el_4, $$_create_component(TimeGroup), null);
    $$_insert_lite($$_el_4, $$_create_component(ChapterTitleOrMainTitle), null);
    $$_insert_lite($$_el_4, $$_create_component(MuteButton2, { tooltip: "top center" }), null);
    $$_insert_lite($$_el_4, $$_create_component(VolumeSlider2), null);
    $$_insert_lite($$_el_4, $$_create_component(CaptionButton2), null);
    $$_insert_lite($$_el_4, $$_create_component(ChaptersMenu, { tooltip: "top center", position: "top" }), null);
    $$_insert_lite($$_el_4, $$_create_component(SettingsMenu, { tooltip: "top right", position: "top" }), null);
    return $$_root;
  })();
}
var $$_templ = $$_create_template(`<div part="media-ui vod live:dvr mobile"><media-captions mk-d></media-captions><media-buffering-indicator mk-d></media-buffering-indicator><div part="scrim"></div><div part="controls"><div part="controls-group"><div part="controls-spacer"></div></div><div part="controls-group"></div><div part="controls-group"><div part="controls-spacer"></div></div><div part="controls-group"></div></div><div part="start-duration"><media-time type="duration" mk-d></media-time></div></div>`);
var $$_templ_2 = $$_create_template(`<div part="media-ui vod live:dvr desktop "><media-captions mk-d></media-captions><media-buffering-indicator mk-d></media-buffering-indicator><div part="scrim"></div><div part="controls"><div part="controls-group"><div part="controls-spacer"></div></div><div part="controls-group"></div><div part="controls-group"></div><div part="controls-group"></div></div></div>`);
function renderVideo(isMobile) {
  return isMobile ? MobileUI() : DesktopUI();
}
function MobileUI() {
  return (() => {
    const $$_root = $$_clone($$_templ), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.nextSibling, $$_el_4 = $$_el_3.nextSibling, $$_el_5 = $$_el_4.firstChild;
    $$_el_5.firstChild;
    const $$_el_7 = $$_el_5.nextSibling, $$_el_8 = $$_el_7.nextSibling, $$_el_9 = $$_el_8.firstChild, $$_el_10 = $$_el_8.nextSibling, $$_el_11 = $$_el_4.nextSibling, $$_el_12 = $$_el_11.firstChild;
    $$_insert_lite($$_root, $$_create_component(VideoGestures), $$_el);
    $$_setup_custom_element($$_el);
    $$_setup_custom_element($$_el_2);
    $$_insert_lite($$_el_5, $$_create_component(CaptionButton2, { tooltip: "bottom center" }), null);
    $$_insert_lite($$_el_5, $$_create_component(ChaptersMenu), null);
    $$_insert_lite($$_el_5, $$_create_component(SettingsMenu, { tooltip: "bottom center" }), null);
    $$_insert_lite($$_el_5, $$_create_component(MuteButton2, { tooltip: "bottom right" }), null);
    $$_insert_lite($$_el_7, $$_create_component(PlayButton2, { tooltip: "top center" }));
    $$_insert_lite($$_el_8, $$_create_component(TimeGroup), $$_el_9);
    $$_insert_lite($$_el_8, $$_create_component(ChapterTitleOrMainTitle), $$_el_9);
    $$_insert_lite($$_el_8, $$_create_component(FullscreenButton2), null);
    $$_insert_lite($$_el_10, $$_create_component(TimeSlider2));
    $$_setup_custom_element($$_el_12);
    return $$_root;
  })();
}
function DesktopUI() {
  return (() => {
    const $$_root = $$_clone($$_templ_2), $$_el = $$_root.firstChild, $$_el_2 = $$_el.nextSibling, $$_el_3 = $$_el_2.nextSibling, $$_el_4 = $$_el_3.nextSibling, $$_el_5 = $$_el_4.firstChild;
    $$_el_5.firstChild;
    const $$_el_7 = $$_el_5.nextSibling, $$_el_8 = $$_el_7.nextSibling, $$_el_9 = $$_el_8.nextSibling;
    $$_insert_lite($$_root, $$_create_component(VideoGestures), $$_el);
    $$_setup_custom_element($$_el);
    $$_setup_custom_element($$_el_2);
    $$_insert_lite($$_el_5, $$_create_component(ChaptersMenu), null);
    $$_insert_lite($$_el_5, $$_create_component(SettingsMenu), null);
    $$_insert_lite($$_el_8, $$_create_component(TimeSlider2));
    $$_insert_lite($$_el_9, $$_create_component(PlayButton2), null);
    $$_insert_lite($$_el_9, $$_create_component(MuteButton2), null);
    $$_insert_lite($$_el_9, $$_create_component(VolumeSlider2), null);
    $$_insert_lite($$_el_9, $$_create_component(TimeGroup), null);
    $$_insert_lite($$_el_9, $$_create_component(ChapterTitleOrMainTitle), null);
    $$_insert_lite($$_el_9, $$_create_component(CaptionButton2), null);
    $$_insert_lite($$_el_9, $$_create_component(PiPButton), null);
    $$_insert_lite($$_el_9, $$_create_component(FullscreenButton2), null);
    return $$_root;
  })();
}
var CommunitySkin = class extends Component {
  constructor(instance) {
    super(instance);
    __publicField(this, "_media");
    this._media = useMedia();
    provideContext(communitySkinContext, {
      $props: this.$props,
      $media: this._media.$store
    });
  }
  /** We need this to compute and save the layout type to prevent unnecessary re-renders. */
  _getLayoutType() {
    const { viewType, streamType } = this._media.$store;
    return viewType() === "audio" ? streamType().includes("live") ? "audio:live" : "audio" : streamType().endsWith("live") ? "video:live" : "video";
  }
  onAttach() {
    this.setAttributes({
      "data-audio": this._isAudio.bind(this),
      "data-video": this._isVideo.bind(this),
      "data-mobile": this._isMobile.bind(this)
    });
  }
  _isAudio() {
    const { viewType } = this._media.$store;
    return viewType() === "audio";
  }
  _isVideo() {
    const { viewType } = this._media.$store;
    return viewType() !== "audio";
  }
  _isMobile() {
    const { breakpointX } = this._media.$store;
    return breakpointX() === "sm";
  }
  render() {
    const $layoutType = computed(this._getLayoutType.bind(this)), $isMobile = computed(this._isMobile.bind(this));
    return () => {
      const render = $layoutType().startsWith("video") ? renderVideo : renderAudio;
      return render($isMobile());
    };
  }
};
__publicField(CommunitySkin, "el", defineElement({
  tagName: "media-community-skin",
  nohydrate: true,
  props: {
    translations: null
  }
}));
__publicField(CommunitySkin, "register", getUIComponents);

// node_modules/vidstack/dist/dev/index.js
{
  console.warn("[vidstack] dev mode!");
}
export {
  AudioMenuButton,
  AudioMenuItems,
  AudioTrackList,
  BufferingIndicator,
  CaptionButton,
  Captions,
  CaptionsMenuButton,
  CaptionsMenuItems,
  ChaptersMenuItems,
  CommunitySkin,
  FullscreenButton,
  FullscreenController,
  Gesture,
  LibASSTextRenderer,
  List,
  LiveIndicator,
  MEDIA_KEY_SHORTCUTS,
  MediaRemoteControl,
  MediaStoreFactory,
  MediaUserController,
  Menu,
  MenuButton,
  MenuItems,
  MuteButton,
  Outlet,
  PIPButton,
  PlayButton,
  PlaybackRateMenuButton,
  PlaybackRateMenuItems,
  Player,
  Poster,
  QualityMenuButton,
  QualityMenuItems,
  Radio,
  RadioGroup,
  ScreenOrientationController,
  SeekButton,
  Slider,
  SliderStoreFactory,
  SliderThumbnail,
  SliderValue,
  SliderVideo,
  TextRenderers,
  TextTrack,
  TextTrackList,
  Thumbnail,
  Time,
  TimeRange,
  TimeSlider,
  ToggleButton,
  Tooltip,
  VideoQualityList,
  VolumeSlider,
  appendTriggerEvent,
  canFullscreen,
  findTriggerEvent,
  getTimeRangesEnd,
  getTimeRangesStart,
  hasTriggerEvent,
  isAudioProvider,
  isHLSProvider,
  isHTMLAudioElement,
  isHTMLMediaElement,
  isHTMLVideoElement,
  isTrackCaptionKind,
  isVideoProvider,
  mediaContext,
  softResetMediaStore,
  toggleButtonProps,
  walkTriggerEventChain
};
//# sourceMappingURL=vidstack.js.map
