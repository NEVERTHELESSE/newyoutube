import { ComponentController, defineProp, Component, defineElement } from 'maverick.js/element';
import { signal, peek, effect, getScope, scoped, createContext, useContext, StoreFactory, tick, onDispose, computed } from 'maverick.js';
import { EventsTarget, DOMEvent, listenEvent, isUndefined, isFunction, waitTimeout, isKeyboardClick, setAttribute, isArray, isKeyboardEvent, appendTriggerEvent, isNull, deferredPromise, isString, isNumber, noop, animationFrameThrottle, setStyle } from 'maverick.js/std';
import { i as isHTMLMediaElement } from './providers/type-check.js';
import { A as AudioProviderLoader } from './providers/audio/loader.js';
import { H as HLSProviderLoader } from './providers/hls/loader.js';
import { V as VideoProviderLoader } from './providers/video/loader.js';

const LIST_ADD = Symbol(0);
const LIST_REMOVE = Symbol(0);
const LIST_RESET = Symbol(0);
const LIST_SELECT = Symbol(0);
const LIST_READONLY = Symbol(0);
const LIST_SET_READONLY = Symbol(0);
const LIST_ON_RESET = Symbol(0);
const LIST_ON_REMOVE = Symbol(0);
const LIST_ON_USER_SELECT = Symbol(0);

class List extends EventsTarget {
  a = [];
  /* @internal */
  [LIST_READONLY] = false;
  get length() {
    return this.a.length;
  }
  get readonly() {
    return this[LIST_READONLY];
  }
  /**
   * Transform list to an array.
   */
  toArray() {
    return [...this.a];
  }
  [Symbol.iterator]() {
    return this.a.values();
  }
  /* @internal */
  [LIST_ADD](item, trigger) {
    const index = this.a.length;
    if (!("" + index in this)) {
      Object.defineProperty(this, index, {
        get() {
          return this.a[index];
        }
      });
    }
    if (this.a.includes(item))
      return;
    this.a.push(item);
    this.dispatchEvent(new DOMEvent("add", { detail: item, trigger }));
  }
  /* @internal */
  [LIST_REMOVE](item, trigger) {
    const index = this.a.indexOf(item);
    if (index >= 0) {
      this[LIST_ON_REMOVE]?.(item, trigger);
      this.a.splice(index, 1);
      this.dispatchEvent(new DOMEvent("remove", { detail: item, trigger }));
    }
  }
  /* @internal */
  [LIST_RESET](trigger) {
    for (const item of [...this.a])
      this[LIST_REMOVE](item, trigger);
    this.a = [];
    this[LIST_SET_READONLY](false, trigger);
    this[LIST_ON_RESET]?.();
  }
  /* @internal */
  [LIST_SET_READONLY](readonly, trigger) {
    if (this[LIST_READONLY] === readonly)
      return;
    this[LIST_READONLY] = readonly;
    this.dispatchEvent(new DOMEvent("readonly-change", { detail: readonly, trigger }));
  }
}

var key = {
  fullscreenEnabled: 0,
  fullscreenElement: 1,
  requestFullscreen: 2,
  exitFullscreen: 3,
  fullscreenchange: 4,
  fullscreenerror: 5,
  fullscreen: 6
};
var webkit = [
  "webkitFullscreenEnabled",
  "webkitFullscreenElement",
  "webkitRequestFullscreen",
  "webkitExitFullscreen",
  "webkitfullscreenchange",
  "webkitfullscreenerror",
  "-webkit-full-screen"
];
var moz = [
  "mozFullScreenEnabled",
  "mozFullScreenElement",
  "mozRequestFullScreen",
  "mozCancelFullScreen",
  "mozfullscreenchange",
  "mozfullscreenerror",
  "-moz-full-screen"
];
var ms = [
  "msFullscreenEnabled",
  "msFullscreenElement",
  "msRequestFullscreen",
  "msExitFullscreen",
  "MSFullscreenChange",
  "MSFullscreenError",
  "-ms-fullscreen"
];
var document$1 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
var vendor = "fullscreenEnabled" in document$1 && Object.keys(key) || webkit[0] in document$1 && webkit || moz[0] in document$1 && moz || ms[0] in document$1 && ms || [];
var fscreen = {
  requestFullscreen: function(element) {
    return element[vendor[key.requestFullscreen]]();
  },
  requestFullscreenFunction: function(element) {
    return element[vendor[key.requestFullscreen]];
  },
  get exitFullscreen() {
    return document$1[vendor[key.exitFullscreen]].bind(document$1);
  },
  get fullscreenPseudoClass() {
    return ":" + vendor[key.fullscreen];
  },
  addEventListener: function(type, handler, options) {
    return document$1.addEventListener(vendor[key[type]], handler, options);
  },
  removeEventListener: function(type, handler, options) {
    return document$1.removeEventListener(vendor[key[type]], handler, options);
  },
  get fullscreenEnabled() {
    return Boolean(document$1[vendor[key.fullscreenEnabled]]);
  },
  set fullscreenEnabled(val) {
  },
  get fullscreenElement() {
    return document$1[vendor[key.fullscreenElement]];
  },
  set fullscreenElement(val) {
  },
  get onfullscreenchange() {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()];
  },
  set onfullscreenchange(handler) {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()] = handler;
  },
  get onfullscreenerror() {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()];
  },
  set onfullscreenerror(handler) {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()] = handler;
  }
};
var fscreen$1 = fscreen;

const CAN_FULLSCREEN = fscreen$1.fullscreenEnabled;
class FullscreenController extends ComponentController {
  /**
   * Tracks whether we're the active fullscreen event listener. Fullscreen events can only be
   * listened to globally on the document so we need to know if they relate to the current host
   * element or not.
   */
  b = false;
  c = false;
  get active() {
    return this.c;
  }
  get supported() {
    return CAN_FULLSCREEN;
  }
  onConnect() {
    listenEvent(fscreen$1, "fullscreenchange", this.d.bind(this));
    listenEvent(fscreen$1, "fullscreenerror", this.e.bind(this));
  }
  async onDisconnect() {
    if (CAN_FULLSCREEN)
      await this.exit();
  }
  d(event) {
    const active = isFullscreen(this.el);
    if (active === this.c)
      return;
    if (!active)
      this.b = false;
    this.c = active;
    this.dispatch("fullscreen-change", { detail: active, trigger: event });
  }
  e(event) {
    if (!this.b)
      return;
    this.dispatch("fullscreen-error", { detail: null, trigger: event });
    this.b = false;
  }
  async enter() {
    try {
      this.b = true;
      if (!this.el || isFullscreen(this.el))
        return;
      assertFullscreenAPI();
      return fscreen$1.requestFullscreen(this.el);
    } catch (error) {
      this.b = false;
      throw error;
    }
  }
  async exit() {
    if (!this.el || !isFullscreen(this.el))
      return;
    assertFullscreenAPI();
    return fscreen$1.exitFullscreen();
  }
}
function canFullscreen() {
  return CAN_FULLSCREEN;
}
function isFullscreen(host) {
  if (fscreen$1.fullscreenElement === host)
    return true;
  try {
    return host.matches(
      // @ts-expect-error - `fullscreenPseudoClass` is missing from `@types/fscreen`.
      fscreen$1.fullscreenPseudoClass
    );
  } catch (error) {
    return false;
  }
}
function assertFullscreenAPI() {
  if (CAN_FULLSCREEN)
    return;
  throw Error(
    "[vidstack] no fullscreen API"
  );
}

const UA = navigator?.userAgent.toLowerCase();
const IS_IOS = /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);
const IS_IPHONE = /(iphone|ipod)/gi.test(navigator?.platform);
const IS_CHROME = !!window.chrome;
const IS_SAFARI = !!window.safari || IS_IOS;
function canOrientScreen() {
  return !isUndefined(screen.orientation) && isFunction(screen.orientation.lock) && isFunction(screen.orientation.unlock);
}
function canPlayHLSNatively(video) {
  if (!video)
    video = document.createElement("video");
  return video.canPlayType("application/vnd.apple.mpegurl").length > 0;
}
function canUsePictureInPicture(video) {
  return !!document.pictureInPictureEnabled && !video.disablePictureInPicture;
}
function canUseVideoPresentation(video) {
  return isFunction(video.webkitSupportsPresentationMode) && isFunction(video.webkitSetPresentationMode);
}
async function canChangeVolume() {
  const video = document.createElement("video");
  video.volume = 0.5;
  await waitTimeout(0);
  return video.volume === 0.5;
}
function getMediaSource() {
  return window?.MediaSource ?? window?.WebKitMediaSource;
}
function getSourceBuffer() {
  return window?.SourceBuffer ?? window?.WebKitSourceBuffer;
}
function isHLSSupported() {
  const MediaSource = getMediaSource();
  if (isUndefined(MediaSource))
    return false;
  const isTypeSupported = MediaSource && isFunction(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  const SourceBuffer = getSourceBuffer();
  const isSourceBufferValid = isUndefined(SourceBuffer) || !isUndefined(SourceBuffer.prototype) && isFunction(SourceBuffer.prototype.appendBuffer) && isFunction(SourceBuffer.prototype.remove);
  return !!isTypeSupported && !!isSourceBufferValid;
}

const CAN_USE_SCREEN_ORIENTATION_API = canOrientScreen();
class ScreenOrientationController extends ComponentController {
  g = signal(getScreenOrientation());
  f = signal(false);
  h;
  /**
   * The current screen orientation type.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get type() {
    return this.g();
  }
  /**
   * Whether the screen orientation is currently locked.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get locked() {
    return this.f();
  }
  /**
   * Whether the viewport is in a portrait orientation.
   *
   * @signal
   */
  get portrait() {
    return this.g().startsWith("portrait");
  }
  /**
   * Whether the viewport is in a landscape orientation.
   *
   * @signal
   */
  get landscape() {
    return this.g().startsWith("landscape");
  }
  /**
   * Whether the native Screen Orientation API is available.
   */
  get supported() {
    return CAN_USE_SCREEN_ORIENTATION_API;
  }
  onConnect() {
    if (CAN_USE_SCREEN_ORIENTATION_API) {
      listenEvent(screen.orientation, "change", this.i.bind(this));
    } else {
      const query = window.matchMedia("(orientation: landscape)");
      query.onchange = this.i.bind(this);
      return () => query.onchange = null;
    }
  }
  async onDisconnect() {
    if (CAN_USE_SCREEN_ORIENTATION_API && this.f())
      await this.unlock();
  }
  i(event) {
    this.g.set(getScreenOrientation());
    this.dispatch("orientation-change", {
      detail: {
        orientation: peek(this.g),
        lock: this.h
      },
      trigger: event
    });
  }
  /**
   * Locks the orientation of the screen to the desired orientation type using the
   * Screen Orientation API.
   *
   * @param lockType - The screen lock orientation type.
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async lock(lockType) {
    if (peek(this.f) || this.h === lockType)
      return;
    assertScreenOrientationAPI();
    await screen.orientation.lock(lockType);
    this.f.set(true);
    this.h = lockType;
  }
  /**
   * Unlocks the orientation of the screen to it's default state using the Screen Orientation
   * API. This method will throw an error if the API is unavailable.
   *
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async unlock() {
    if (!peek(this.f))
      return;
    assertScreenOrientationAPI();
    this.h = void 0;
    await screen.orientation.unlock();
    this.f.set(false);
  }
}
function assertScreenOrientationAPI() {
  if (CAN_USE_SCREEN_ORIENTATION_API)
    return;
  throw Error(
    "[vidstack] no orientation API"
  );
}
function getScreenOrientation() {
  if (CAN_USE_SCREEN_ORIENTATION_API)
    return window.screen.orientation.type;
  return window.innerWidth >= window.innerHeight ? "landscape-primary" : "portrait-primary";
}

function setAttributeIfEmpty(target, name, value) {
  if (!target.hasAttribute(name))
    target.setAttribute(name, value);
}
function setARIALabel(target, label) {
  if (target.hasAttribute("aria-label") || target.hasAttribute("aria-describedby"))
    return;
  function updateAriaDescription() {
    setAttribute(target, "aria-label", label());
  }
  effect(updateAriaDescription);
}
function isElementParent(owner, node, test) {
  while (node) {
    if (node === owner) {
      return true;
    } else if (node.localName === owner.localName || test?.(node)) {
      break;
    } else {
      node = node.parentElement;
    }
  }
  return false;
}
function onPress(target, handler) {
  listenEvent(target, "pointerup", (event) => {
    if (event.button === 0)
      handler(event);
  });
  listenEvent(target, "keydown", (event) => {
    if (isKeyboardClick(event))
      handler(event);
  });
}
function scopedRaf(callback) {
  const scope = getScope();
  requestAnimationFrame(() => scoped(callback, scope));
}

const mediaContext = createContext();
function useMedia() {
  return useContext(mediaContext);
}

const MEDIA_ATTRIBUTES = [
  "autoplay",
  "autoplayError",
  "canFullscreen",
  "canPictureInPicture",
  "canLoad",
  "canPlay",
  "canSeek",
  "ended",
  "error",
  "fullscreen",
  "loop",
  "live",
  "liveEdge",
  "mediaType",
  "muted",
  "paused",
  "pictureInPicture",
  "playing",
  "playsinline",
  "seeking",
  "started",
  "streamType",
  "userIdle",
  "viewType",
  "waiting"
];

const MEDIA_KEY_SHORTCUTS = {
  togglePaused: "k Space",
  toggleMuted: "m",
  toggleFullscreen: "f",
  togglePictureInPicture: "i",
  toggleCaptions: "c",
  seekBackward: "ArrowLeft",
  seekForward: "ArrowRight",
  volumeUp: "ArrowUp",
  volumeDown: "ArrowDown"
};
const MODIFIER_KEYS = /* @__PURE__ */ new Set(["Shift", "Alt", "Meta", "Control"]), BUTTON_SELECTORS = 'button, [role="button"]', IGNORE_SELECTORS = 'input, textarea, select, [contenteditable], [role^="menuitem"]';
class MediaKeyboardController extends ComponentController {
  constructor(instance, _media) {
    super(instance);
    this.j = _media;
  }
  onConnect() {
    effect(this.Xa.bind(this));
  }
  Xa() {
    const { keyDisabled, keyTarget } = this.$props;
    if (keyDisabled())
      return;
    const target = keyTarget() === "player" ? this.el : document, $active = signal(false);
    if (target === this.el) {
      this.listen("focusin", () => $active.set(true));
      this.listen("focusout", (event) => {
        if (!this.el.contains(event.target))
          $active.set(false);
      });
    } else {
      if (!peek($active))
        $active.set(document.querySelector("media-player") === this.el);
      listenEvent(document, "focusin", (event) => {
        const activePlayer = event.composedPath().find((el) => el instanceof Element && el.localName === "media-player");
        if (activePlayer !== void 0)
          $active.set(this.el === activePlayer);
      });
    }
    effect(() => {
      if (!$active())
        return;
      listenEvent(target, "keyup", this.Ya.bind(this));
      listenEvent(target, "keydown", this.Za.bind(this));
      listenEvent(target, "keydown", this._a.bind(this), { capture: true });
    });
  }
  Ya(event) {
    const focused = document.activeElement, sliderFocused = focused?.hasAttribute("data-media-slider");
    if (!event.key || !this.$store.canSeek() || sliderFocused || focused?.matches(IGNORE_SELECTORS)) {
      return;
    }
    const method = this.Va(event);
    if (method?.startsWith("seek")) {
      event.preventDefault();
      event.stopPropagation();
      if (this.Ta) {
        this.Wa(event);
        this.Ta = null;
      } else {
        this.j.remote.seek(this.Ua, event);
        this.Ua = void 0;
      }
    }
    if (method?.startsWith("volume")) {
      const volumeSlider = this.el.querySelector("media-volume-slider");
      volumeSlider?.dispatchEvent(new DOMEvent("keyup", { trigger: event }));
    }
  }
  Za(event) {
    if (!event.key || MODIFIER_KEYS.has(event.key))
      return;
    const focused = document.activeElement;
    if (focused?.matches(IGNORE_SELECTORS) || isKeyboardClick(event) && focused?.matches(BUTTON_SELECTORS)) {
      return;
    }
    const sliderFocused = focused?.hasAttribute("data-media-slider"), method = this.Va(event);
    if (!method && !event.metaKey && /[0-9]/.test(event.key) && !sliderFocused) {
      event.preventDefault();
      event.stopPropagation();
      this.j.remote.seek(this.$store.duration() / 10 * Number(event.key), event);
      return;
    }
    if (!method || /volume|seek/.test(method) && sliderFocused)
      return;
    event.preventDefault();
    event.stopPropagation();
    switch (method) {
      case "seekForward":
      case "seekBackward":
        this.$a(event, method);
        break;
      case "volumeUp":
      case "volumeDown":
        const volumeSlider = this.el.querySelector("media-volume-slider");
        if (volumeSlider) {
          volumeSlider.dispatchEvent(new DOMEvent("keydown", { trigger: event }));
        } else {
          const value = event.shiftKey ? 0.1 : 0.05;
          this.j.remote.changeVolume(
            this.$store.volume() + (method === "volumeUp" ? +value : -value),
            event
          );
        }
        break;
      case "toggleFullscreen":
        this.j.remote.toggleFullscreen("prefer-media", event);
        break;
      default:
        this.j.remote[method]?.(event);
    }
  }
  _a(event) {
    if (isHTMLMediaElement(event.target) && this.Va(event)) {
      event.preventDefault();
    }
  }
  Va(event) {
    const keyShortcuts = {
      ...this.$props.keyShortcuts(),
      ...this.j.ariaKeys
    };
    return Object.keys(keyShortcuts).find(
      (method) => keyShortcuts[method].split(" ").some(
        (keys) => replaceSymbolKeys(keys).replace(/Control/g, "Ctrl").split("+").every(
          (key) => MODIFIER_KEYS.has(key) ? event[key.toLowerCase() + "Key"] : event.key === key.replace("Space", " ")
        )
      )
    );
  }
  Ua;
  ab(event, type) {
    const seekBy = event.shiftKey ? 10 : 5;
    return this.Ua = Math.max(
      0,
      Math.min(
        (this.Ua ?? this.$store.currentTime()) + (type === "seekForward" ? +seekBy : -seekBy),
        this.$store.duration()
      )
    );
  }
  Ta = null;
  Wa(event) {
    this.Ta?.dispatchEvent(new DOMEvent(event.type, { trigger: event }));
  }
  $a(event, type) {
    if (!this.$store.canSeek())
      return;
    if (!this.Ta)
      this.Ta = this.el.querySelector("media-time-slider");
    if (this.Ta) {
      this.Wa(event);
    } else {
      this.j.remote.seeking(this.ab(event, type), event);
    }
  }
}
const SYMBOL_KEY_MAP = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")"];
function replaceSymbolKeys(key) {
  return key.replace(/Shift\+(\d)/g, (_, num) => SYMBOL_KEY_MAP[num - 1]);
}

const mediaPlayerProps = {
  autoplay: false,
  aspectRatio: defineProp({
    value: null,
    type: {
      from(value) {
        if (!value)
          return null;
        if (!value.includes("/"))
          return +value;
        const [width, height] = value.split("/").map(Number);
        return +(width / height).toFixed(4);
      }
    }
  }),
  controls: false,
  currentTime: 0,
  crossorigin: null,
  fullscreenOrientation: "landscape",
  load: "visible",
  logLevel: "silent",
  loop: false,
  muted: false,
  paused: true,
  playsinline: false,
  playbackRate: 1,
  poster: "",
  preload: "metadata",
  preferNativeHLS: defineProp({
    value: false,
    attribute: "prefer-native-hls"
  }),
  src: "",
  userIdleDelay: 2e3,
  viewType: "unknown",
  streamType: "unknown",
  volume: 1,
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  keyDisabled: false,
  keyTarget: "player",
  keyShortcuts: MEDIA_KEY_SHORTCUTS,
  title: "",
  thumbnails: null,
  textTracks: defineProp({
    value: [],
    attribute: false
  }),
  smallBreakpointX: 600,
  largeBreakpointX: 980,
  smallBreakpointY: 380,
  largeBreakpointY: 600
};

class TimeRange {
  W;
  get length() {
    return this.W.length;
  }
  constructor(start, end) {
    if (isArray(start)) {
      this.W = start;
    } else if (!isUndefined(start) && !isUndefined(end)) {
      this.W = [[start, end]];
    } else {
      this.W = [];
    }
  }
  start(index) {
    return this.W[index][0] ?? Infinity;
  }
  end(index) {
    return this.W[index][1] ?? Infinity;
  }
}
function getTimeRangesStart(range) {
  if (!range.length)
    return null;
  let min = range.start(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.start(i);
    if (value < min)
      min = value;
  }
  return min;
}
function getTimeRangesEnd(range) {
  if (!range.length)
    return null;
  let max = range.end(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.end(i);
    if (value > max)
      max = value;
  }
  return max;
}

const MediaStoreFactory = new StoreFactory({
  audioTracks: [],
  audioTrack: null,
  autoplay: false,
  autoplayError: void 0,
  buffered: new TimeRange(),
  duration: 0,
  canLoad: false,
  canFullscreen: false,
  canPictureInPicture: false,
  canPlay: false,
  controls: false,
  crossorigin: null,
  poster: "",
  currentTime: 0,
  ended: false,
  error: void 0,
  fullscreen: false,
  loop: false,
  logLevel: "silent",
  mediaType: "unknown",
  muted: false,
  paused: true,
  played: new TimeRange(),
  playing: false,
  playsinline: false,
  pictureInPicture: false,
  preload: "metadata",
  playbackRate: 1,
  qualities: [],
  quality: null,
  autoQuality: false,
  canSetQuality: true,
  seekable: new TimeRange(),
  seeking: false,
  source: { src: "", type: "" },
  sources: [],
  started: false,
  title: "",
  textTracks: [],
  textTrack: null,
  thumbnails: null,
  thumbnailCues: [],
  volume: 1,
  waiting: false,
  get viewType() {
    return this.providedViewType !== "unknown" ? this.providedViewType : this.mediaType;
  },
  get streamType() {
    return this.providedStreamType !== "unknown" ? this.providedStreamType : this.inferredStreamType;
  },
  get currentSrc() {
    return this.source;
  },
  get bufferedStart() {
    return getTimeRangesStart(this.buffered) ?? 0;
  },
  get bufferedEnd() {
    return getTimeRangesEnd(this.buffered) ?? 0;
  },
  get seekableStart() {
    return getTimeRangesStart(this.seekable) ?? 0;
  },
  get seekableEnd() {
    return this.canPlay ? getTimeRangesEnd(this.seekable) ?? Infinity : 0;
  },
  get seekableWindow() {
    return Math.max(0, this.seekableEnd - this.seekableStart);
  },
  // ~~ responsive design ~~
  touchPointer: false,
  orientation: "landscape",
  mediaWidth: 0,
  mediaHeight: 0,
  breakpointX: "sm",
  breakpointY: "sm",
  // ~~ user props ~~
  userIdle: false,
  userBehindLiveEdge: false,
  // ~~ live props ~~
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  get canSeek() {
    return /unknown|on-demand|:dvr/.test(this.streamType) && Number.isFinite(this.seekableWindow) && (!this.live || /:dvr/.test(this.streamType) && this.seekableWindow >= this.minLiveDVRWindow);
  },
  get live() {
    return this.streamType.includes("live") || !Number.isFinite(this.duration);
  },
  get liveEdgeStart() {
    return this.live && Number.isFinite(this.seekableEnd) ? Math.max(0, (this.liveSyncPosition ?? this.seekableEnd) - this.liveEdgeTolerance) : 0;
  },
  get liveEdge() {
    return this.live && (!this.canSeek || !this.userBehindLiveEdge && this.currentTime >= this.liveEdgeStart);
  },
  get liveEdgeWindow() {
    return this.live && Number.isFinite(this.seekableEnd) ? this.seekableEnd - this.liveEdgeStart : 0;
  },
  // ~~ internal props ~~
  autoplaying: false,
  providedViewType: "unknown",
  providedStreamType: "unknown",
  inferredStreamType: "unknown",
  liveSyncPosition: null
});
const DO_NOT_RESET_ON_SRC_CHANGE = /* @__PURE__ */ new Set([
  "autoplay",
  "breakpointX",
  "breakpointY",
  "canFullscreen",
  "canLoad",
  "canPictureInPicture",
  "controls",
  "fullscreen",
  "logLevel",
  "loop",
  "mediaHeight",
  "mediaWidth",
  "muted",
  "orientation",
  "pictureInPicture",
  "playsinline",
  "poster",
  "preload",
  "providedStreamType",
  "providedViewType",
  "source",
  "sources",
  "textTrack",
  "textTracks",
  "thumbnailCues",
  "thumbnails",
  "title",
  "touchPointer",
  "volume"
]);
function softResetMediaStore($media) {
  MediaStoreFactory.reset($media, (prop) => !DO_NOT_RESET_ON_SRC_CHANGE.has(prop));
  tick();
}

const SELECTED = Symbol(0);
class SelectList extends List {
  get selected() {
    return this.a.find((item) => item.selected) ?? null;
  }
  get selectedIndex() {
    return this.a.findIndex((item) => item.selected);
  }
  /* @internal */
  [LIST_ON_REMOVE](item, trigger) {
    this[LIST_SELECT](item, false, trigger);
  }
  /* @internal */
  [LIST_ADD](item, trigger) {
    item[SELECTED] = false;
    Object.defineProperty(item, "selected", {
      get() {
        return this[SELECTED];
      },
      set: (selected) => {
        if (this.readonly)
          return;
        this[LIST_ON_USER_SELECT]?.();
        this[LIST_SELECT](item, selected);
      }
    });
    super[LIST_ADD](item, trigger);
  }
  /* @internal */
  [LIST_SELECT](item, selected, trigger) {
    if (selected === item[SELECTED])
      return;
    const prev = this.selected;
    item[SELECTED] = selected;
    const changed = !selected ? prev === item : prev !== item;
    if (changed) {
      if (prev)
        prev[SELECTED] = false;
      this.dispatchEvent(
        new DOMEvent("change", {
          detail: { prev, current: this.selected },
          trigger
        })
      );
    }
  }
}

const SET_AUTO_QUALITY = Symbol(0);
const ENABLE_AUTO_QUALITY = Symbol(0);

class VideoQualityList extends SelectList {
  Sa = false;
  /**
   * Configures quality switching:
   *
   * - `current`: Trigger an immediate quality level switch. This will abort the current fragment
   * request if any, flush the whole buffer, and fetch fragment matching with current position
   * and requested quality level.
   *
   * - `next`: Trigger a quality level switch for next fragment. This could eventually flush
   * already buffered next fragment.
   *
   * - `load`: Set quality level for next loaded fragment.
   *
   * @see {@link https://vidstack.io/docs/player/core-concepts/quality#switch}
   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#quality-switch-control-api}
   */
  switch = "current";
  /**
   * Whether automatic quality selection is enabled.
   */
  get auto() {
    return this.Sa || this.readonly;
  }
  /* @internal */
  [ENABLE_AUTO_QUALITY];
  /* @internal */
  [LIST_ON_USER_SELECT]() {
    this[SET_AUTO_QUALITY](false);
  }
  /* @internal */
  [LIST_ON_RESET](trigger) {
    this[SET_AUTO_QUALITY](false, trigger);
  }
  /**
   * Request automatic quality selection (if supported). This will be a no-op if the list is
   * `readonly` as that already implies auto-selection.
   */
  autoSelect(trigger) {
    if (this.readonly || this.Sa || !this[ENABLE_AUTO_QUALITY])
      return;
    this[ENABLE_AUTO_QUALITY]();
    this[SET_AUTO_QUALITY](true, trigger);
  }
  /* @internal */
  [SET_AUTO_QUALITY](auto, trigger) {
    if (this.Sa === auto)
      return;
    this.Sa = auto;
    this.dispatchEvent(
      new DOMEvent("auto-change", {
        detail: auto,
        trigger
      })
    );
  }
}

class MediaLoadController extends ComponentController {
  constructor(instance, _callback) {
    super(instance);
    this.jf = _callback;
  }
  async onAttach(el) {
    const load = this.$props.load();
    if (load === "eager") {
      requestAnimationFrame(this.jf);
    } else if (load === "idle") {
      const { waitIdlePeriod } = await import('maverick.js/std');
      waitIdlePeriod(this.jf);
    } else if (load === "visible") {
      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          observer.disconnect();
          this.jf();
        }
      });
      observer.observe(el);
      return observer.disconnect.bind(observer);
    }
  }
}

class MediaPlayerDelegate {
  constructor(_handle, _media) {
    this.N = _handle;
    this.j = _media;
  }
  p(type, ...init) {
    this.N(new DOMEvent(type, init?.[0]));
  }
  async lf(info, trigger) {
    const { $store, logger } = this.j;
    if (peek($store.canPlay))
      return;
    this.p("can-play", { detail: info, trigger });
    tick();
    if ($store.canPlay() && $store.autoplay() && !$store.started()) {
      await this.kf();
    }
  }
  async kf() {
    const { player, $store } = this.j;
    $store.autoplaying.set(true);
    try {
      await player.play();
      this.p("autoplay", { detail: { muted: $store.muted() } });
    } catch (error) {
      this.p("autoplay-fail", {
        detail: {
          muted: $store.muted(),
          error
        }
      });
    } finally {
      $store.autoplaying.set(false);
    }
  }
}

class Queue {
  Ze = /* @__PURE__ */ new Map();
  /**
   * Queue the given `item` under the given `key` to be processed at a later time by calling
   * `serve(key)`.
   */
  t(key, item) {
    if (!this.Ze.has(key))
      this.Ze.set(key, /* @__PURE__ */ new Set());
    this.Ze.get(key).add(item);
  }
  /**
   * Process all items in queue for the given `key`.
   */
  cf(key, callback) {
    const items = this.Ze.get(key);
    if (items)
      for (const item of items)
        callback(item);
    this.Ze.delete(key);
  }
  /**
   * Removes all queued items under the given `key`.
   */
  yf(key) {
    this.Ze.delete(key);
  }
  /**
   * The number of items currently queued under the given `key`.
   */
  df(key) {
    return this.Ze.get(key)?.size ?? 0;
  }
  /**
   * Clear all items in the queue.
   */
  gf() {
    this.Ze.clear();
  }
}

function coerceToError(error) {
  return error instanceof Error ? error : Error(JSON.stringify(error));
}

class MediaUserController extends ComponentController {
  da = -2;
  ba = 2e3;
  ea = false;
  ca = null;
  /**
   * Whether the media user is currently idle.
   */
  get idling() {
    return this.$store.userIdle();
  }
  /**
   * The amount of delay in milliseconds while media playback is progressing without user
   * activity to indicate an idle state.
   *
   * @defaultValue 2000
   */
  get idleDelay() {
    return this.ba;
  }
  set idleDelay(newDelay) {
    this.ba = newDelay;
  }
  /**
   * Change the user idle state.
   */
  idle(idle, delay = this.ba, trigger) {
    this.fa();
    if (!this.ea)
      this.ga(idle, delay, trigger);
  }
  /**
   * Whether all idle tracking should be paused until resumed again.
   */
  pauseIdleTracking(paused, trigger) {
    this.ea = paused;
    if (paused) {
      this.fa();
      this.ga(false, 0, trigger);
    }
  }
  onConnect() {
    effect(this.C.bind(this));
    listenEvent(this.el, "play", this.ia.bind(this));
    listenEvent(this.el, "pause", this.ja.bind(this));
  }
  C() {
    if (this.$store.paused())
      return;
    const onStopIdle = this.ka.bind(this);
    for (const eventType of ["pointerup", "keydown"]) {
      listenEvent(this.el, eventType, onStopIdle);
    }
    effect(() => {
      if (!this.$store.touchPointer())
        listenEvent(this.el, "pointermove", onStopIdle);
    });
  }
  ia(event) {
    this.idle(true, this.ba, event);
  }
  ja(event) {
    this.idle(false, 0, event);
  }
  fa() {
    window.clearTimeout(this.da);
    this.da = -1;
  }
  ka(event) {
    if (event.MEDIA_GESTURE)
      return;
    if (isKeyboardEvent(event)) {
      if (event.key === "Escape") {
        this.el?.focus();
        this.ca = null;
      } else if (this.ca) {
        event.preventDefault();
        requestAnimationFrame(() => {
          this.ca?.focus();
          this.ca = null;
        });
      }
    }
    this.idle(false, 0, event);
    this.idle(true, this.ba, event);
  }
  ga(idle, delay, trigger) {
    if (delay === 0) {
      this.ha(idle, trigger);
      return;
    }
    this.da = window.setTimeout(() => {
      this.ha(idle && !this.ea, trigger);
    }, delay);
  }
  ha(idle, trigger) {
    if (this.$store.userIdle() === idle)
      return;
    this.$store.userIdle.set(idle);
    if (idle && document.activeElement && this.el?.contains(document.activeElement)) {
      this.ca = document.activeElement;
      requestAnimationFrame(() => this.el?.focus());
    }
    this.dispatch("user-idle-change", {
      detail: idle,
      trigger
    });
  }
}

class MediaRequestContext {
  $a = false;
  rf = false;
  pf = false;
  Ze = new Queue();
}
class MediaRequestManager extends ComponentController {
  constructor(instance, _stateMgr, _request, _media) {
    super(instance);
    this.u = _stateMgr;
    this.mf = _request;
    this.j = _media;
    this.nf = _media.$store;
    this.q = _media.$provider;
    this.Q = new MediaUserController(instance);
    this.of = new FullscreenController(instance);
    this.nb = new ScreenOrientationController(instance);
  }
  Q;
  of;
  nb;
  nf;
  q;
  onConnect() {
    effect(this.uf.bind(this));
    effect(this.vf.bind(this));
    effect(this.wf.bind(this));
    const names = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), handle = this.xf.bind(this);
    for (const name of names) {
      if (name.startsWith("media-")) {
        this.listen(name, handle);
      }
    }
    this.listen("fullscreen-change", this.d.bind(this));
  }
  xf(event) {
    event.stopPropagation();
    if (peek(this.q))
      this[event.type]?.(event);
  }
  async M() {
    const { canPlay, paused, ended, autoplaying, seekableStart } = this.nf;
    if (!peek(paused))
      return;
    try {
      const provider = peek(this.q);
      throwIfNotReadyForPlayback(provider, peek(canPlay));
      if (peek(ended)) {
        provider.currentTime = seekableStart() + 0.1;
      }
      return provider.play();
    } catch (error) {
      const errorEvent = this.createEvent("play-fail", { detail: coerceToError(error) });
      errorEvent.autoplay = autoplaying();
      this.u.N(errorEvent);
      throw error;
    }
  }
  async L() {
    const { canPlay, paused } = this.nf;
    if (peek(paused))
      return;
    const provider = peek(this.q);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    return provider.pause();
  }
  V() {
    const { canPlay, live, liveEdge, canSeek, liveSyncPosition, seekableEnd, userBehindLiveEdge } = this.nf;
    userBehindLiveEdge.set(false);
    if (peek(() => !live() || liveEdge() || !canSeek()))
      return;
    const provider = peek(this.q);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    provider.currentTime = liveSyncPosition() ?? seekableEnd() - 2;
  }
  qf = false;
  async R(target = "prefer-media") {
    const provider = peek(this.q);
    const adapter = target === "prefer-media" && this.of.supported || target === "media" ? this.of : provider?.fullscreen;
    throwIfFullscreenNotSupported(target, adapter);
    if (adapter.active)
      return;
    if (peek(this.nf.pictureInPicture)) {
      this.qf = true;
      await this.U();
    }
    return adapter.enter();
  }
  async S(target = "prefer-media") {
    const provider = peek(this.q);
    const adapter = target === "prefer-media" && this.of.supported || target === "media" ? this.of : provider?.fullscreen;
    throwIfFullscreenNotSupported(target, adapter);
    if (!adapter.active)
      return;
    if (this.nb.locked)
      await this.nb.unlock();
    try {
      const result = await adapter.exit();
      if (this.qf && peek(this.nf.canPictureInPicture)) {
        await this.T();
      }
      return result;
    } finally {
      this.qf = false;
    }
  }
  async T() {
    this.sf();
    if (this.nf.pictureInPicture())
      return;
    return await this.q().pictureInPicture.enter();
  }
  async U() {
    this.sf();
    if (!this.nf.pictureInPicture())
      return;
    return await this.q().pictureInPicture.exit();
  }
  sf() {
    if (this.nf.canPictureInPicture())
      return;
    throw Error(
      "[vidstack] no pip support"
    );
  }
  uf() {
    this.Q.idleDelay = this.$props.userIdleDelay();
  }
  vf() {
    const { canLoad, canFullscreen } = this.nf, supported = this.of.supported || this.q()?.fullscreen?.supported || false;
    if (canLoad() && peek(canFullscreen) === supported)
      return;
    canFullscreen.set(supported);
  }
  wf() {
    const { canLoad, canPictureInPicture } = this.nf, supported = this.q()?.pictureInPicture?.supported || false;
    if (canLoad() && peek(canPictureInPicture) === supported)
      return;
    canPictureInPicture.set(supported);
  }
  ["media-audio-track-change-request"](event) {
    if (this.j.audioTracks.readonly) {
      return;
    }
    const index = event.detail, track = this.j.audioTracks[index];
    if (track) {
      this.mf.Ze.t("audioTrack", event);
      track.selected = true;
    }
  }
  async ["media-enter-fullscreen-request"](event) {
    try {
      this.mf.Ze.t("fullscreen", event);
      await this.R(event.detail);
    } catch (error) {
      this.e(error);
    }
  }
  async ["media-exit-fullscreen-request"](event) {
    try {
      this.mf.Ze.t("fullscreen", event);
      await this.S(event.detail);
    } catch (error) {
      this.e(error);
    }
  }
  async d(event) {
    if (!event.detail)
      return;
    try {
      const lockType = peek(this.$props.fullscreenOrientation);
      if (this.nb.supported && !isUndefined(lockType)) {
        await this.nb.lock(lockType);
      }
    } catch (e) {
    }
  }
  e(error) {
    this.u.N(
      this.createEvent("fullscreen-error", {
        detail: coerceToError(error)
      })
    );
  }
  async ["media-enter-pip-request"](event) {
    try {
      this.mf.Ze.t("pip", event);
      await this.T();
    } catch (error) {
      this.tf(error);
    }
  }
  async ["media-exit-pip-request"](event) {
    try {
      this.mf.Ze.t("pip", event);
      await this.U();
    } catch (error) {
      this.tf(error);
    }
  }
  tf(error) {
    this.u.N(
      this.createEvent("picture-in-picture-error", {
        detail: coerceToError(error)
      })
    );
  }
  ["media-live-edge-request"](event) {
    const { live, liveEdge, canSeek } = this.nf;
    if (!live() || liveEdge() || !canSeek())
      return;
    this.mf.Ze.t("seeked", event);
    try {
      this.V();
    } catch (e) {
    }
  }
  ["media-loop-request"]() {
    window.requestAnimationFrame(async () => {
      try {
        this.mf.rf = true;
        this.mf.pf = true;
        await this.M();
      } catch (e) {
        this.mf.rf = false;
        this.mf.pf = false;
      }
    });
  }
  async ["media-pause-request"](event) {
    if (this.nf.paused())
      return;
    try {
      this.mf.Ze.t("pause", event);
      await this.q().pause();
    } catch (e) {
      this.mf.Ze.yf("pause");
    }
  }
  async ["media-play-request"](event) {
    if (!this.nf.paused())
      return;
    try {
      this.mf.Ze.t("play", event);
      await this.q().play();
    } catch (e) {
      const errorEvent = this.createEvent("play-fail", { detail: coerceToError(e) });
      this.u.N(errorEvent);
    }
  }
  ["media-rate-change-request"](event) {
    if (this.nf.playbackRate() === event.detail)
      return;
    this.mf.Ze.t("rate", event);
    this.q().playbackRate = event.detail;
  }
  ["media-quality-change-request"](event) {
    if (this.j.qualities.readonly) {
      return;
    }
    this.mf.Ze.t("quality", event);
    const index = event.detail;
    if (index < 0) {
      this.j.qualities.autoSelect(event);
    } else {
      const quality = this.j.qualities[index];
      if (quality) {
        quality.selected = true;
      }
    }
  }
  ["media-resume-user-idle-request"](event) {
    this.mf.Ze.t("userIdle", event);
    this.Q.pauseIdleTracking(false, event);
  }
  ["media-pause-user-idle-request"](event) {
    this.mf.Ze.t("userIdle", event);
    this.Q.pauseIdleTracking(true, event);
  }
  ["media-seek-request"](event) {
    const { seekableStart, seekableEnd, ended, canSeek, live, userBehindLiveEdge } = this.nf;
    if (ended())
      this.mf.pf = true;
    this.mf.$a = false;
    this.mf.Ze.yf("seeking");
    const boundTime = Math.min(Math.max(seekableStart() + 0.1, event.detail), seekableEnd() - 0.1);
    if (!Number.isFinite(boundTime) || !canSeek())
      return;
    this.mf.Ze.t("seeked", event);
    this.q().currentTime = boundTime;
    if (live() && event.isOriginTrusted && Math.abs(seekableEnd() - boundTime) >= 2) {
      userBehindLiveEdge.set(true);
    }
  }
  ["media-seeking-request"](event) {
    this.mf.Ze.t("seeking", event);
    this.nf.seeking.set(true);
    this.mf.$a = true;
  }
  ["media-start-loading"](event) {
    if (this.nf.canLoad())
      return;
    this.mf.Ze.t("load", event);
    this.u.N(this.createEvent("can-load"));
  }
  ["media-text-track-change-request"](event) {
    const { index, mode } = event.detail, track = this.j.textTracks[index];
    if (track) {
      this.mf.Ze.t("textTrack", event);
      track.setMode(mode, event);
    }
  }
  ["media-mute-request"](event) {
    if (this.nf.muted())
      return;
    this.mf.Ze.t("volume", event);
    this.q().muted = true;
  }
  ["media-unmute-request"](event) {
    const { muted, volume } = this.nf;
    if (!muted())
      return;
    this.mf.Ze.t("volume", event);
    this.j.$provider().muted = false;
    if (volume() === 0) {
      this.mf.Ze.t("volume", event);
      this.q().volume = 0.25;
    }
  }
  ["media-volume-change-request"](event) {
    const { muted, volume } = this.nf;
    const newVolume = event.detail;
    if (volume() === newVolume)
      return;
    this.mf.Ze.t("volume", event);
    this.q().volume = newVolume;
    if (newVolume > 0 && muted()) {
      this.mf.Ze.t("volume", event);
      this.q().muted = false;
    }
  }
}
function throwIfNotReadyForPlayback(provider, canPlay) {
  if (provider && canPlay)
    return;
  throw Error(
    "[vidstack] media not ready"
  );
}
function throwIfFullscreenNotSupported(target, fullscreen) {
  if (fullscreen?.supported)
    return;
  throw Error(
    "[vidstack] no fullscreen support"
  );
}

var functionDebounce = debounce;
function debounce(fn, wait, callFirst) {
  var timeout = null;
  var debouncedFn = null;
  var clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      debouncedFn = null;
      timeout = null;
    }
  };
  var flush = function() {
    var call = debouncedFn;
    clear();
    if (call) {
      call();
    }
  };
  var debounceWrapper = function() {
    if (!wait) {
      return fn.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clear();
    debouncedFn = function() {
      fn.apply(context, args);
    };
    timeout = setTimeout(function() {
      timeout = null;
      if (!callNow) {
        var call = debouncedFn;
        debouncedFn = null;
        return call();
      }
    }, wait);
    if (callNow) {
      return debouncedFn();
    }
  };
  debounceWrapper.cancel = clear;
  debounceWrapper.flush = flush;
  return debounceWrapper;
}

var functionThrottle = throttle;
function throttle(fn, interval, options) {
  var timeoutId = null;
  var throttledFn = null;
  var leading = options && options.leading;
  var trailing = options && options.trailing;
  if (leading == null) {
    leading = true;
  }
  if (trailing == null) {
    trailing = !leading;
  }
  if (leading == true) {
    trailing = false;
  }
  var cancel = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  var flush = function() {
    var call = throttledFn;
    cancel();
    if (call) {
      call();
    }
  };
  var throttleWrapper = function() {
    var callNow = leading && !timeoutId;
    var context = this;
    var args = arguments;
    throttledFn = function() {
      return fn.apply(context, args);
    };
    if (!timeoutId) {
      timeoutId = setTimeout(function() {
        timeoutId = null;
        if (trailing) {
          return throttledFn();
        }
      }, interval);
    }
    if (callNow) {
      callNow = false;
      return throttledFn();
    }
  };
  throttleWrapper.cancel = cancel;
  throttleWrapper.flush = flush;
  return throttleWrapper;
}

const ATTACH_VIDEO = Symbol(0);
const TEXT_TRACK_CROSSORIGIN = Symbol(0);
const TEXT_TRACK_READY_STATE = Symbol(0);
const TEXT_TRACK_UPDATE_ACTIVE_CUES = Symbol(0);
const TEXT_TRACK_CAN_LOAD = Symbol(0);
const TEXT_TRACK_ON_MODE_CHANGE = Symbol(0);
const TEXT_TRACK_NATIVE = Symbol(0);
const TEXT_TRACK_NATIVE_HLS = Symbol(0);

const TRACKED_EVENT = /* @__PURE__ */ new Set([
  "autoplay",
  "autoplay-fail",
  "can-load",
  "sources-change",
  "source-change",
  "load-start",
  "abort",
  "error",
  "loaded-metadata",
  "loaded-data",
  "can-play",
  "play",
  "play-fail",
  "pause",
  "playing",
  "seeking",
  "seeked",
  "waiting"
]);

class MediaStateManager extends ComponentController {
  constructor(instance, _request, _media) {
    super(instance);
    this.mf = _request;
    this.j = _media;
    this.nf = _media.$store;
  }
  nf;
  zf = /* @__PURE__ */ new Map();
  Gf = true;
  Df = false;
  Bf;
  onAttach(el) {
    el.setAttribute("aria-busy", "true");
  }
  onConnect(el) {
    this.Mf();
    this.Nf();
    this.Of();
    this.listen("fullscreen-change", this["fullscreen-change"].bind(this));
    this.listen("fullscreen-error", this["fullscreen-error"].bind(this));
  }
  N(event) {
    const type = event.type;
    this[event.type]?.(event);
    {
      if (TRACKED_EVENT.has(type))
        this.zf.set(type, event);
      this.el?.dispatchEvent(event);
    }
  }
  Cf() {
    this.Hf();
    this.mf.pf = false;
    this.mf.rf = false;
    this.Df = false;
    this.Bf = void 0;
    this.zf.clear();
  }
  Af(request, event) {
    this.mf.Ze.cf(request, (requestEvent) => {
      event.request = requestEvent;
      appendTriggerEvent(event, requestEvent);
    });
  }
  Mf() {
    this.Ef();
    this.If();
    const textTracks = this.j.textTracks;
    listenEvent(textTracks, "add", this.Ef.bind(this));
    listenEvent(textTracks, "remove", this.Ef.bind(this));
    listenEvent(textTracks, "mode-change", this.If.bind(this));
  }
  Nf() {
    const qualities = this.j.qualities;
    listenEvent(qualities, "add", this.Jf.bind(this));
    listenEvent(qualities, "remove", this.Jf.bind(this));
    listenEvent(qualities, "change", this.Pf.bind(this));
    listenEvent(qualities, "auto-change", this.Qf.bind(this));
    listenEvent(qualities, "readonly-change", this.Rf.bind(this));
  }
  Of() {
    const audioTracks = this.j.audioTracks;
    listenEvent(audioTracks, "add", this.Kf.bind(this));
    listenEvent(audioTracks, "remove", this.Kf.bind(this));
    listenEvent(audioTracks, "change", this.Sf.bind(this));
  }
  Ef(event) {
    const { textTracks } = this.nf;
    textTracks.set(this.j.textTracks.toArray());
    this.dispatch("text-tracks-change", {
      detail: textTracks(),
      trigger: event
    });
  }
  If(event) {
    if (event)
      this.Af("textTrack", event);
    const current = this.j.textTracks.selected, { textTrack } = this.nf;
    if (textTrack() !== current) {
      textTrack.set(current);
      this.dispatch("text-track-change", {
        detail: current,
        trigger: event
      });
    }
  }
  Kf(event) {
    const { audioTracks } = this.nf;
    audioTracks.set(this.j.audioTracks.toArray());
    this.dispatch("audio-tracks-change", {
      detail: audioTracks(),
      trigger: event
    });
  }
  Sf(event) {
    const { audioTrack } = this.nf;
    audioTrack.set(this.j.audioTracks.selected);
    this.Af("audioTrack", event);
    this.dispatch("audio-track-change", {
      detail: audioTrack(),
      trigger: event
    });
  }
  Jf(event) {
    const { qualities } = this.nf;
    qualities.set(this.j.qualities.toArray());
    this.dispatch("qualities-change", {
      detail: qualities(),
      trigger: event
    });
  }
  Pf(event) {
    const { quality } = this.nf;
    quality.set(this.j.qualities.selected);
    this.Af("quality", event);
    this.dispatch("quality-change", {
      detail: quality(),
      trigger: event
    });
  }
  Qf() {
    this.nf.autoQuality.set(this.j.qualities.auto);
  }
  Rf() {
    this.nf.canSetQuality.set(!this.j.qualities.readonly);
  }
  ["provider-change"](event) {
    this.j.$provider.set(event.detail);
  }
  ["autoplay"](event) {
    appendTriggerEvent(event, this.zf.get("play"));
    appendTriggerEvent(event, this.zf.get("can-play"));
    this.nf.autoplayError.set(void 0);
  }
  ["autoplay-fail"](event) {
    appendTriggerEvent(event, this.zf.get("play-fail"));
    appendTriggerEvent(event, this.zf.get("can-play"));
    this.nf.autoplayError.set(event.detail);
    this.Cf();
  }
  ["can-load"](event) {
    this.nf.canLoad.set(true);
    this.zf.set("can-load", event);
    this.Af("load", event);
    this.j.textTracks[TEXT_TRACK_CAN_LOAD]();
  }
  ["media-type-change"](event) {
    appendTriggerEvent(event, this.zf.get("source-change"));
    const viewType = this.nf.viewType();
    this.nf.mediaType.set(event.detail);
    if (viewType !== this.nf.viewType()) {
      setTimeout(
        () => this.dispatch("view-type-change", {
          detail: this.nf.viewType(),
          trigger: event
        }),
        0
      );
    }
  }
  ["stream-type-change"](event) {
    const { streamType, inferredStreamType } = this.nf;
    appendTriggerEvent(event, this.zf.get("source-change"));
    inferredStreamType.set(event.detail);
    event.detail = streamType();
  }
  ["rate-change"](event) {
    this.nf.playbackRate.set(event.detail);
    this.Af("rate", event);
  }
  ["sources-change"](event) {
    this.nf.sources.set(event.detail);
  }
  ["source-change"](event) {
    appendTriggerEvent(event, this.zf.get("sources-change"));
    this.nf.source.set(event.detail);
    this.el?.setAttribute("aria-busy", "true");
    if (this.Gf) {
      this.Gf = false;
      return;
    }
    this.j.audioTracks[LIST_RESET](event);
    this.j.qualities[LIST_RESET](event);
    this.Cf();
    softResetMediaStore(this.j.$store);
    this.zf.set(event.type, event);
  }
  ["abort"](event) {
    appendTriggerEvent(event, this.zf.get("source-change"));
    appendTriggerEvent(event, this.zf.get("can-load"));
  }
  ["load-start"](event) {
    appendTriggerEvent(event, this.zf.get("source-change"));
  }
  ["error"](event) {
    this.nf.error.set(event.detail);
    appendTriggerEvent(event, this.zf.get("abort"));
  }
  ["loaded-metadata"](event) {
    appendTriggerEvent(event, this.zf.get("load-start"));
  }
  ["loaded-data"](event) {
    appendTriggerEvent(event, this.zf.get("load-start"));
  }
  ["can-play"](event) {
    if (event.trigger?.type !== "loadedmetadata") {
      appendTriggerEvent(event, this.zf.get("loaded-metadata"));
    }
    this.Lf(event.detail);
    this.el?.setAttribute("aria-busy", "false");
  }
  ["can-play-through"](event) {
    this.Lf(event.detail);
    appendTriggerEvent(event, this.zf.get("can-play"));
  }
  Lf(detail) {
    const { seekable, seekableEnd, buffered, duration, canPlay } = this.nf;
    seekable.set(detail.seekable);
    buffered.set(detail.buffered);
    duration.set(seekableEnd);
    canPlay.set(true);
  }
  ["duration-change"](event) {
    const { live, duration } = this.nf, time = event.detail;
    if (!live())
      duration.set(!Number.isNaN(time) ? time : 0);
  }
  ["progress"](event) {
    const { buffered, seekable, live, duration, seekableEnd } = this.nf, detail = event.detail;
    buffered.set(detail.buffered);
    seekable.set(detail.seekable);
    if (live()) {
      duration.set(seekableEnd);
      this.dispatch("duration-change", {
        detail: seekableEnd(),
        trigger: event
      });
    }
  }
  ["play"](event) {
    const { paused, autoplayError, ended, autoplaying } = this.nf;
    event.autoplay = autoplaying();
    if (this.mf.rf || !paused()) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.zf.get("waiting"));
    this.Af("play", event);
    paused.set(false);
    autoplayError.set(void 0);
    if (ended() || this.mf.pf) {
      this.mf.pf = false;
      ended.set(false);
      this.N(this.createEvent("replay", { trigger: event }));
    }
  }
  ["play-fail"](event) {
    appendTriggerEvent(event, this.zf.get("play"));
    this.Af("play", event);
    const { paused, playing } = this.nf;
    paused.set(true);
    playing.set(false);
    this.Cf();
  }
  ["playing"](event) {
    const playEvent = this.zf.get("play");
    if (playEvent) {
      appendTriggerEvent(event, this.zf.get("waiting"));
      appendTriggerEvent(event, playEvent);
    } else {
      appendTriggerEvent(event, this.zf.get("seeked"));
    }
    setTimeout(() => this.Cf(), 0);
    const { paused, playing, seeking, ended } = this.nf;
    paused.set(false);
    playing.set(true);
    seeking.set(false);
    ended.set(false);
    if (this.mf.rf) {
      event.stopImmediatePropagation();
      this.mf.rf = false;
      return;
    }
    this["started"](event);
  }
  ["started"](event) {
    const { started, live, liveSyncPosition, seekableEnd } = this.nf;
    if (!started()) {
      if (live()) {
        const end = liveSyncPosition() ?? seekableEnd() - 2;
        if (Number.isFinite(end))
          this.j.$provider().currentTime = end;
      }
      started.set(true);
      this.N(this.createEvent("started", { trigger: event }));
    }
  }
  ["pause"](event) {
    if (this.mf.rf) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.zf.get("seeked"));
    this.Af("pause", event);
    const { paused, playing, seeking } = this.nf;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    this.Cf();
  }
  ["time-update"](event) {
    const { currentTime, played, waiting } = this.nf, detail = event.detail;
    currentTime.set(detail.currentTime);
    played.set(detail.played);
    waiting.set(false);
    for (const track of this.j.textTracks) {
      track[TEXT_TRACK_UPDATE_ACTIVE_CUES](detail.currentTime, event);
    }
  }
  ["volume-change"](event) {
    const { volume, muted } = this.nf, detail = event.detail;
    volume.set(detail.volume);
    muted.set(detail.muted || detail.volume === 0);
    this.Af("volume", event);
  }
  ["seeking"] = functionThrottle(
    (event) => {
      const { seeking, currentTime, paused } = this.nf;
      seeking.set(true);
      currentTime.set(event.detail);
      this.Af("seeking", event);
      if (paused()) {
        this.Bf = event;
        this.Ff();
      }
    },
    150,
    { leading: true }
  );
  ["seeked"](event) {
    const { seeking, currentTime, paused, duration, ended } = this.nf;
    if (this.mf.$a) {
      seeking.set(true);
      event.stopImmediatePropagation();
    } else if (seeking()) {
      const waitingEvent = this.zf.get("waiting");
      appendTriggerEvent(event, waitingEvent);
      if (waitingEvent?.trigger?.type !== "seeking") {
        appendTriggerEvent(event, this.zf.get("seeking"));
      }
      if (paused())
        this.Hf();
      seeking.set(false);
      if (event.detail !== duration())
        ended.set(false);
      currentTime.set(event.detail);
      this.Af("seeked", event);
      const origin = event.originEvent;
      if (origin && origin.isTrusted && !/seek/.test(origin.type)) {
        this["started"](event);
      }
    }
  }
  ["waiting"](event) {
    if (this.Df || this.mf.$a)
      return;
    event.stopImmediatePropagation();
    this.Bf = event;
    this.Ff();
  }
  Ff = functionDebounce(() => {
    if (!this.Bf)
      return;
    this.Df = true;
    const { waiting, playing } = this.nf;
    waiting.set(true);
    playing.set(false);
    const event = this.createEvent("waiting", { trigger: this.Bf });
    this.zf.set("waiting", event);
    this.el.dispatchEvent(event);
    this.Bf = void 0;
    this.Df = false;
  }, 300);
  ["ended"](event) {
    if (this.mf.rf) {
      event.stopImmediatePropagation();
      return;
    }
    const { paused, playing, seeking, ended } = this.nf;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    ended.set(true);
    this.Cf();
  }
  Hf() {
    this.Ff.cancel();
    this.nf.waiting.set(false);
  }
  ["fullscreen-change"](event) {
    this.nf.fullscreen.set(event.detail);
    this.Af("fullscreen", event);
  }
  ["fullscreen-error"](event) {
    this.Af("fullscreen", event);
  }
  ["picture-in-picture-change"](event) {
    this.nf.pictureInPicture.set(event.detail);
    this.Af("pip", event);
  }
  ["picture-in-picture-error"](event) {
    this.Af("pip", event);
  }
}

class MediaStoreSync extends ComponentController {
  onAttach(el) {
    effect(this.Tf.bind(this));
    effect(this.Uf.bind(this));
    effect(this.Vf.bind(this));
    effect(this.Wf.bind(this));
    effect(this.Xf.bind(this));
    effect(this.Yf.bind(this));
    effect(this.Zf.bind(this));
    effect(this._f.bind(this));
    effect(this.$f.bind(this));
    effect(this.ag.bind(this));
  }
  bg() {
    return;
  }
  Tf() {
    const autoplay = this.$props.autoplay();
    this.$store.autoplay.set(autoplay);
    this.dispatch("autoplay-change", { detail: autoplay });
  }
  Vf() {
    const loop = this.$props.loop();
    this.$store.loop.set(loop);
    this.dispatch("loop-change", { detail: loop });
  }
  Wf() {
    const controls = this.$props.controls();
    this.$store.controls.set(controls);
    this.dispatch("controls-change", { detail: controls });
  }
  Uf() {
    const poster = this.$props.poster();
    this.$store.poster.set(poster);
    this.dispatch("poster-change", { detail: poster });
  }
  Xf() {
    this.$store.crossorigin.set(this.$props.crossorigin());
  }
  Yf() {
    const playsinline = this.$props.playsinline();
    this.$store.playsinline.set(playsinline);
    this.dispatch("playsinline-change", { detail: playsinline });
  }
  _f() {
    this.dispatch("live-change", { detail: this.$store.live() });
  }
  Zf() {
    this.$store.liveEdgeTolerance.set(this.$props.liveEdgeTolerance());
    this.$store.minLiveDVRWindow.set(this.$props.minLiveDVRWindow());
  }
  $f() {
    this.dispatch("live-edge-change", { detail: this.$store.liveEdge() });
  }
  ag() {
    this.$store.thumbnails.set(this.$props.thumbnails());
  }
}

function preconnect(url, rel = "preconnect") {
  const exists = document.querySelector(`link[href="${url}"]`);
  if (!isNull(exists))
    return true;
  const link = document.createElement("link");
  link.rel = rel;
  link.href = url;
  link.crossOrigin = "true";
  document.head.append(link);
  return true;
}
const pendingRequests = {};
function loadScript(src) {
  if (pendingRequests[src])
    return pendingRequests[src].promise;
  const promise = deferredPromise(), exists = document.querySelector(`script[src="${src}"]`);
  if (!isNull(exists)) {
    promise.resolve();
    return promise.promise;
  }
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => {
    promise.resolve();
    delete pendingRequests[src];
  };
  script.onerror = () => {
    promise.reject();
    delete pendingRequests[src];
  };
  setTimeout(() => document.head.append(script), 0);
  return promise.promise;
}
function getRequestCredentials(crossorigin) {
  return crossorigin === "use-credentials" ? "include" : isString(crossorigin) ? "same-origin" : void 0;
}

function findActiveCue(time, cues) {
  for (let i = 0, len = cues.length; i < len; i++) {
    if (isCueActive(cues[i], time))
      return cues[i];
  }
  return null;
}
function isCueActive(cue, time) {
  return time >= cue.startTime && time < cue.endTime;
}
function onTrackChapterChange(tracks, currentTrack, onChange) {
  const track = tracks.toArray().find((track2) => track2.kind === "chapters" && track2.mode === "showing");
  if (track === currentTrack)
    return;
  if (!track) {
    onChange(null);
    return;
  }
  if (track.readyState == 2) {
    onChange(track);
  } else {
    onChange(null);
    track.addEventListener("load", () => onChange(track), { once: true });
  }
}

class TextTrack extends EventsTarget {
  static createId(track) {
    return `id::${track.type}-${track.kind}-${track.src ?? track.label}`;
  }
  src;
  content;
  type;
  encoding;
  id = "";
  label = "";
  language = "";
  kind;
  default = false;
  Ia = false;
  Ea = 0;
  Ga = "disabled";
  Ja = {};
  Ha = [];
  Da = [];
  Fa = [];
  /* @internal */
  [TEXT_TRACK_READY_STATE] = 0;
  /* @internal */
  [TEXT_TRACK_CROSSORIGIN];
  /* @internal */
  [TEXT_TRACK_ON_MODE_CHANGE] = null;
  /* @internal */
  [TEXT_TRACK_NATIVE] = null;
  get metadata() {
    return this.Ja;
  }
  get regions() {
    return this.Ha;
  }
  get cues() {
    return this.Da;
  }
  get activeCues() {
    return this.Fa;
  }
  /**
   * - 0: Not Loading
   * - 1: Loading
   * - 2: Ready
   * - 3: Error
   */
  get readyState() {
    return this[TEXT_TRACK_READY_STATE];
  }
  get mode() {
    return this.Ga;
  }
  set mode(mode) {
    this.setMode(mode);
  }
  constructor(init) {
    super();
    for (const prop of Object.keys(init))
      this[prop] = init[prop];
    if (!this.type)
      this.type = "vtt";
    if (init.content) {
      import('media-captions').then(({ parseText, VTTCue, VTTRegion }) => {
        if (init.type === "json") {
          this.Ka(init.content, VTTCue, VTTRegion);
        } else {
          parseText(init.content, { type: init.type }).then(({ cues, regions }) => {
            this.Da = cues;
            this.Ha = regions;
            this.La();
          });
        }
      });
    } else if (!init.src)
      this[TEXT_TRACK_READY_STATE] = 2;
  }
  addCue(cue, trigger) {
    let i = 0, length = this.Da.length;
    for (i = 0; i < length; i++)
      if (cue.endTime <= this.Da[i].startTime)
        break;
    if (i === length)
      this.Da.push(cue);
    else
      this.Da.splice(i, 0, cue);
    if (trigger?.type !== "cuechange") {
      this[TEXT_TRACK_NATIVE]?.track.addCue(cue);
    }
    this.dispatchEvent(new DOMEvent("add-cue", { detail: cue, trigger }));
    if (isCueActive(cue, this.Ea)) {
      this[TEXT_TRACK_UPDATE_ACTIVE_CUES](this.Ea, trigger);
    }
  }
  removeCue(cue, trigger) {
    const index = this.Da.indexOf(cue);
    if (index >= 0) {
      const isActive = this.Fa.includes(cue);
      this.Da.splice(index, 1);
      this[TEXT_TRACK_NATIVE]?.track.removeCue(cue);
      this.dispatchEvent(new DOMEvent("remove-cue", { detail: cue, trigger }));
      if (isActive) {
        this[TEXT_TRACK_UPDATE_ACTIVE_CUES](this.Ea, trigger);
      }
    }
  }
  setMode(mode, trigger) {
    if (this.Ga === mode)
      return;
    this.Ga = mode;
    if (mode === "disabled") {
      this.Fa = [];
      this.Ma();
    } else if (this.readyState === 2) {
      this[TEXT_TRACK_UPDATE_ACTIVE_CUES](this.Ea, trigger);
    } else {
      this.Na();
    }
    this.dispatchEvent(new DOMEvent("mode-change", { detail: this, trigger }));
    this[TEXT_TRACK_ON_MODE_CHANGE]?.();
  }
  /* @internal */
  [TEXT_TRACK_UPDATE_ACTIVE_CUES](currentTime, trigger) {
    this.Ea = currentTime;
    if (this.mode === "disabled" || !this.Da.length)
      return;
    const activeCues = [];
    for (let i = 0, length = this.Da.length; i < length; i++) {
      const cue = this.Da[i];
      if (isCueActive(cue, currentTime))
        activeCues.push(cue);
    }
    let changed = activeCues.length !== this.Fa.length;
    if (!changed) {
      for (let i = 0; i < activeCues.length; i++) {
        if (!this.Fa.includes(activeCues[i])) {
          changed = true;
          break;
        }
      }
    }
    this.Fa = activeCues;
    if (changed)
      this.Ma(trigger);
  }
  /* @internal */
  [TEXT_TRACK_CAN_LOAD]() {
    this.Ia = true;
    if (this.Ga !== "disabled")
      this.Na();
  }
  async Na() {
    if (!this.Ia || !this.src || this[TEXT_TRACK_READY_STATE] > 0)
      return;
    this[TEXT_TRACK_READY_STATE] = 1;
    this.dispatchEvent(new DOMEvent("load-start"));
    try {
      const { parseResponse, VTTCue, VTTRegion } = await import('media-captions'), crossorigin = this[TEXT_TRACK_CROSSORIGIN]?.();
      const response = fetch(this.src, {
        headers: this.type === "json" ? { "Content-Type": "application/json" } : void 0,
        credentials: getRequestCredentials(crossorigin)
      });
      if (this.type === "json") {
        this.Ka(await (await response).text(), VTTCue, VTTRegion);
      } else {
        const { errors, metadata, regions, cues } = await parseResponse(response, {
          type: this.type,
          encoding: this.encoding
        });
        if (errors[0]?.code === 0) {
          throw errors[0];
        } else {
          this.Ja = metadata;
          this.Ha = regions;
          this.Da = cues;
        }
      }
      this.La();
    } catch (error) {
      this.Oa(error);
    }
  }
  La() {
    this[TEXT_TRACK_READY_STATE] = 2;
    if (!this.src || this.type !== "vtt") {
      const nativeTrack = this[TEXT_TRACK_NATIVE]?.track;
      if (nativeTrack)
        for (const cue of this.Da)
          nativeTrack.addCue(cue);
    }
    const loadEvent = new DOMEvent("load");
    this[TEXT_TRACK_UPDATE_ACTIVE_CUES](this.Ea, loadEvent);
    this.dispatchEvent(loadEvent);
  }
  Oa(error) {
    this[TEXT_TRACK_READY_STATE] = 3;
    this.dispatchEvent(new DOMEvent("error", { detail: error }));
  }
  Ka(json, VTTCue, VTTRegion) {
    try {
      json = JSON.parse(json);
      if (json.regions) {
        this.Ha = json.regions.map((json2) => Object.assign(new VTTRegion(), json2));
      }
      if (json.cues) {
        this.Da = json.cues.filter((json2) => isNumber(json2.startTime) && isNumber(json2.endTime)).map((json2) => Object.assign(new VTTCue(0, 0, ""), json2));
      }
    } catch (error) {
      this.Oa(error);
    }
  }
  Ma(trigger) {
    this.dispatchEvent(new DOMEvent("cue-change", { trigger }));
  }
}
const captionRE = /captions|subtitles/;
function isTrackCaptionKind(track) {
  return captionRE.test(track.kind);
}

class MediaRemoteControl {
  constructor(_logger) {
    this.$ = _logger;
  }
  Z = null;
  Y = null;
  _ = -1;
  /**
   * Set the target from which to dispatch media requests events from. The events should bubble
   * up from this target to the `<media-player>` element.
   *
   * @example
   * ```ts
   * const button = document.querySelector('button');
   * remote.setTarget(button);
   * ```
   */
  setTarget(target) {
    this.Z = target;
  }
  /**
   * Returns the current `<media-player>` element. This method will attempt to find the player by
   * searching up from either the given `target` or default target set via `remote.setTarget`.
   *
   * @example
   * ```ts
   * const player = remote.getPlayer();
   * ```
   */
  getPlayer(target) {
    if (this.Y)
      return this.Y;
    (target ?? this.Z)?.dispatchEvent(
      new DOMEvent("find-media-player", {
        detail: (player) => void (this.Y = player),
        bubbles: true,
        composed: true
      })
    );
    return this.Y;
  }
  /**
   * Set the current `<media-player>` element so the remote can support toggle methods such as
   * `togglePaused` as they rely on the current media state.
   */
  setPlayer(player) {
    this.Y = player;
  }
  /**
   * Dispatch a request to start the media loading process. This will only work if the media
   * player has been initialized with a custom loading strategy `<media-player load="custom">`.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#loading-strategies}
   */
  startLoading(trigger) {
    this.X("media-start-loading", trigger);
  }
  /**
   * Dispatch a request to begin/resume media playback.
   */
  play(trigger) {
    this.X("media-play-request", trigger);
  }
  /**
   * Dispatch a request to pause media playback.
   */
  pause(trigger) {
    this.X("media-pause-request", trigger);
  }
  /**
   * Dispatch a request to set the media volume to mute (0).
   */
  mute(trigger) {
    this.X("media-mute-request", trigger);
  }
  /**
   * Dispatch a request to unmute the media volume and set it back to it's previous state.
   */
  unmute(trigger) {
    this.X("media-unmute-request", trigger);
  }
  /**
   * Dispatch a request to enter fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  enterFullscreen(target, trigger) {
    this.X("media-enter-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to exit fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  exitFullscreen(target, trigger) {
    this.X("media-exit-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to enter picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  enterPictureInPicture(trigger) {
    this.X("media-enter-pip-request", trigger);
  }
  /**
   * Dispatch a request to exit picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  exitPictureInPicture(trigger) {
    this.X("media-exit-pip-request", trigger);
  }
  /**
   * Notify the media player that a seeking process is happening and to seek to the given `time`.
   */
  seeking(time, trigger) {
    this.X("media-seeking-request", trigger, time);
  }
  /**
   * Notify the media player that a seeking operation has completed and to seek to the given `time`.
   * This is generally called after a series of `remote.seeking()` calls.
   */
  seek(time, trigger) {
    this.X("media-seek-request", trigger, time);
  }
  seekToLiveEdge(trigger) {
    this.X("media-live-edge-request", trigger);
  }
  /**
   * Dispatch a request to update the media volume to the given `volume` level which is a value
   * between 0 and 1.
   *
   * @example
   * ```ts
   * remote.changeVolume(0); // 0%
   * remote.changeVolume(0.05); // 5%
   * remote.changeVolume(0.5); // 50%
   * remote.changeVolume(0.75); // 70%
   * remote.changeVolume(1); // 100%
   * ```
   */
  changeVolume(volume, trigger) {
    this.X("media-volume-change-request", trigger, Math.max(0, Math.min(1, volume)));
  }
  /**
   * Dispatch a request to change the current audio track.
   *
   * @example
   * ```ts
   * remote.changeAudioTrack(1); // track at index 1
   * ```
   */
  changeAudioTrack(index, trigger) {
    this.X("media-audio-track-change-request", trigger, index);
  }
  /**
   * Dispatch a request to change the video quality. The special value `-1` represents auto quality
   * selection.
   *
   * @example
   * ```ts
   * remote.changeQuality(-1); // auto
   * remote.changeQuality(1); // quality at index 1
   * ```
   */
  changeQuality(index, trigger) {
    this.X("media-quality-change-request", trigger, index);
  }
  /**
   * Dispatch a request to change the mode of the text track at the given index.
   *
   * @example
   * ```ts
   * remote.changeTextTrackMode(1, 'showing'); // track at index 1
   * ```
   */
  changeTextTrackMode(index, mode, trigger) {
    this.X("media-text-track-change-request", trigger, {
      index,
      mode
    });
  }
  /**
   * Dispatch a request to change the media playback rate.
   *
   * @example
   * ```ts
   * remote.changePlaybackRate(0.5); // Half the normal speed
   * remote.changePlaybackRate(1); // Normal speed
   * remote.changePlaybackRate(1.5); // 50% faster than normal
   * remote.changePlaybackRate(2); // Double the normal speed
   * ```
   */
  changePlaybackRate(rate, trigger) {
    this.X("media-rate-change-request", trigger, rate);
  }
  /**
   * Dispatch a request to resume user idle tracking. Refer to {@link MediaRemoteControl.pauseUserIdle}
   * for more information.
   */
  resumeUserIdle(trigger) {
    this.X("media-resume-user-idle-request", trigger);
  }
  /**
   * Dispatch a request to pause user idle tracking. Pausing tracking will result in the `user-idle`
   * attribute and state being `false` until `remote.resumeUserIdle()` is called. This method
   * is generally used when building custom controls and you'd like to prevent the UI from
   * dissapearing.
   *
   * @example
   * ```ts
   * // Prevent user idling while menu is being interacted with.
   * function onSettingsOpen() {
   *   remote.pauseUserIdle();
   * }
   *
   * function onSettingsClose() {
   *   remote.resumeUserIdle();
   * }
   * ```
   */
  pauseUserIdle(trigger) {
    this.X("media-pause-user-idle-request", trigger);
  }
  /**
   * Dispatch a request to toggle the media playback state.
   */
  togglePaused(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.paused)
      this.play(trigger);
    else
      this.pause(trigger);
  }
  /**
   * Dispatch a request to toggle the user idle state.
   */
  toggleUserIdle(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    player.user.idle(!player.user.idling, 0, trigger);
  }
  /**
   * Dispatch a request to toggle the media muted state.
   */
  toggleMuted(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.muted)
      this.unmute(trigger);
    else
      this.mute(trigger);
  }
  /**
   * Dispatch a request to toggle the media fullscreen state.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  toggleFullscreen(target, trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.fullscreen)
      this.exitFullscreen(target, trigger);
    else
      this.enterFullscreen(target, trigger);
  }
  /**
   * Dispatch a request to toggle the media picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  togglePictureInPicture(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.pictureInPicture)
      this.exitPictureInPicture(trigger);
    else
      this.enterPictureInPicture(trigger);
  }
  /**
   * Dispatch a request to toggle the current captions mode.
   */
  toggleCaptions(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    const tracks = player.state.textTracks, track = player.state.textTrack;
    if (track) {
      const index = tracks.indexOf(track);
      this.changeTextTrackMode(index, "disabled", trigger);
      this._ = index;
    } else {
      let index = this._;
      if (!tracks[index] || !isTrackCaptionKind(tracks[index])) {
        index = -1;
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2) && track2.default);
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2));
      }
      if (index >= 0)
        this.changeTextTrackMode(index, "showing", trigger);
      this._ = -1;
    }
  }
  X(type, trigger, detail) {
    const request = new DOMEvent(type, {
      bubbles: true,
      composed: true,
      detail,
      trigger
    });
    const shouldUsePlayer = trigger?.target && (trigger.target === document || trigger.target === window || trigger.target === document.body || this.Y && !this.Y.contains(trigger.target));
    const target = shouldUsePlayer ? this.Z ?? this.getPlayer() : trigger?.target ?? this.Z;
    target?.dispatchEvent(request);
  }
  aa(method) {
  }
}

class ThumbnailsLoader extends ComponentController {
  j;
  onConnect() {
    this.j = useMedia();
    effect(this.cg.bind(this));
  }
  cg() {
    const { canLoad, thumbnailCues } = this.j.$store;
    if (!canLoad())
      return;
    const controller = new AbortController(), { crossorigin, thumbnails } = this.j.$store;
    const src = thumbnails();
    if (!src)
      return;
    import('media-captions').then(({ parseResponse }) => {
      parseResponse(
        fetch(src, {
          signal: controller.signal,
          credentials: getRequestCredentials(crossorigin())
        })
      ).then(({ cues }) => thumbnailCues.set(cues)).catch(noop);
    });
    return () => {
      controller.abort();
      thumbnailCues.set([]);
    };
  }
}

class AudioTrackList extends SelectList {
  getById(id) {
    if (id === "")
      return null;
    return this.a.find((track) => track.id === id) ?? null;
  }
}

class NativeTextRenderer {
  priority = 0;
  eg = true;
  qa = null;
  ya = null;
  dg = /* @__PURE__ */ new Set();
  canRender() {
    return true;
  }
  attach(video) {
    this.qa = video;
    video.textTracks.onchange = this.Hc.bind(this);
  }
  addTrack(track) {
    this.dg.add(track);
    this.gg(track);
  }
  removeTrack(track) {
    track[TEXT_TRACK_NATIVE]?.remove?.();
    track[TEXT_TRACK_NATIVE] = null;
    this.dg.delete(track);
  }
  changeTrack(track) {
    const current = track?.[TEXT_TRACK_NATIVE];
    if (current && current.track.mode !== "showing") {
      current.track.mode = "showing";
    }
    this.ya = track;
  }
  setDisplay(display) {
    this.eg = display;
    this.Hc();
  }
  detach() {
    if (this.qa)
      this.qa.textTracks.onchange = null;
    for (const track of this.dg)
      this.removeTrack(track);
    this.dg.clear();
    this.qa = null;
    this.ya = null;
  }
  gg(track) {
    if (!this.qa)
      return;
    const el = track[TEXT_TRACK_NATIVE] ??= this.hg(track);
    if (el instanceof HTMLElement) {
      this.qa.append(el);
      el.track.mode = el.default ? "showing" : "hidden";
    }
  }
  hg(track) {
    const el = document.createElement("track"), isDefault = track.default || track.mode === "showing", isSupported = track.src && track.type === "vtt";
    el.id = track.id;
    el.src = isSupported ? track.src : "https://cdn.jsdelivr.net/npm/vidstack@0.6.12/empty.vtt";
    el.label = track.label;
    el.kind = track.kind;
    el.default = isDefault;
    track.language && (el.srclang = track.language);
    if (isDefault && !isSupported) {
      this.fg(track, el.track);
    }
    return el;
  }
  fg(track, native) {
    if (track.src && track.type === "vtt" || native.cues?.length)
      return;
    for (const cue of track.cues)
      native.addCue(cue);
  }
  Hc(event) {
    for (const track of this.dg) {
      const nativeTrack = track[TEXT_TRACK_NATIVE]?.track;
      if (!nativeTrack)
        continue;
      if (!this.eg) {
        nativeTrack.mode = "disabled";
        continue;
      }
      const isShowing = nativeTrack.mode === "showing";
      if (isShowing)
        this.fg(track, nativeTrack);
      track.setMode(isShowing ? "showing" : "disabled", event);
    }
  }
}

class TextRenderers {
  constructor(_media) {
    this.j = _media;
    const textTracks = _media.textTracks;
    this.pa = textTracks;
    effect(this.ua.bind(this));
    onDispose(this.ra.bind(this));
    listenEvent(textTracks, "add", this.va.bind(this));
    listenEvent(textTracks, "remove", this.wa.bind(this));
    listenEvent(textTracks, "mode-change", this.na.bind(this));
  }
  qa = null;
  pa;
  oa = [];
  sa = false;
  la = null;
  ma = null;
  ua() {
    const { $store, $iosControls } = this.j;
    this.sa = $store.controls() || $iosControls();
    this.na();
  }
  add(renderer) {
    this.oa.push(renderer);
    this.na();
  }
  remove(renderer) {
    renderer.detach();
    this.oa.splice(this.oa.indexOf(renderer), 1);
    this.na();
  }
  /* @internal */
  [ATTACH_VIDEO](video) {
    requestAnimationFrame(() => {
      this.qa = video;
      if (video) {
        this.la = new NativeTextRenderer();
        this.la.attach(video);
        for (const track of this.pa)
          this.ta(track);
      }
      this.na();
    });
  }
  ta(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.la?.addTrack(track);
  }
  xa(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.la?.removeTrack(track);
  }
  va(event) {
    this.ta(event.detail);
  }
  wa(event) {
    this.xa(event.detail);
  }
  na() {
    if (!this.qa) {
      this.ra();
      return;
    }
    const currentTrack = this.pa.selected;
    if (this.sa || currentTrack?.[TEXT_TRACK_NATIVE_HLS]) {
      this.ma?.changeTrack(null);
      this.la.setDisplay(true);
      this.la.changeTrack(currentTrack);
      return;
    }
    this.la.setDisplay(false);
    this.la.changeTrack(null);
    if (!currentTrack) {
      this.ma?.changeTrack(null);
      return;
    }
    const customRenderer = this.oa.sort((a, b) => a.priority - b.priority).find((loader) => loader.canRender(currentTrack));
    if (this.ma !== customRenderer) {
      this.ma?.detach();
      customRenderer?.attach(this.qa);
      this.ma = customRenderer ?? null;
    }
    customRenderer?.changeTrack(currentTrack);
  }
  ra() {
    this.la?.detach();
    this.la = null;
    this.ma?.detach();
    this.ma = null;
  }
}

class TextTrackList extends List {
  Ia = false;
  Pa = {};
  /** @internal */
  [TEXT_TRACK_CROSSORIGIN];
  get selected() {
    const track = this.a.find((t) => t.mode === "showing" && isTrackCaptionKind(t));
    return track ?? null;
  }
  add(init, trigger) {
    const isTrack = init instanceof TextTrack, track = isTrack ? init : new TextTrack(init);
    if (this.Pa[init.kind] && init.default)
      delete init.default;
    track.addEventListener("mode-change", this.Qa);
    this[LIST_ADD](track, trigger);
    track[TEXT_TRACK_CROSSORIGIN] = this[TEXT_TRACK_CROSSORIGIN];
    if (this.Ia)
      track[TEXT_TRACK_CAN_LOAD]();
    if (init.default) {
      this.Pa[init.kind] = track;
      track.mode = "showing";
    }
    return this;
  }
  remove(track, trigger) {
    if (!this.a.includes(track))
      return;
    if (track === this.Pa[track.kind])
      delete this.Pa[track.kind];
    track.mode = "disabled";
    track[TEXT_TRACK_ON_MODE_CHANGE] = null;
    track.removeEventListener("mode-change", this.Qa);
    this[LIST_REMOVE](track, trigger);
    return this;
  }
  clear(trigger) {
    for (const track of this.a)
      this.remove(track, trigger);
    return this;
  }
  getById(id) {
    return this.a.find((track) => track.id === id) ?? null;
  }
  getByKind(kind) {
    const kinds = Array.isArray(kind) ? kind : [kind];
    return this.a.filter((track) => kinds.includes(track.kind));
  }
  /* @internal */
  [TEXT_TRACK_CAN_LOAD]() {
    if (this.Ia)
      return;
    for (const track of this.a)
      track[TEXT_TRACK_CAN_LOAD]();
    this.Ia = true;
  }
  Qa = this.Ra.bind(this);
  Ra(event) {
    const track = event.detail;
    if (track.mode === "showing") {
      const kinds = isTrackCaptionKind(track) ? ["captions", "subtitles"] : [track.kind];
      for (const t of this.a) {
        if (t.mode === "showing" && t != track && kinds.includes(t.kind)) {
          t.mode = "disabled";
        }
      }
    }
    this.dispatchEvent(
      new DOMEvent("mode-change", {
        detail: event.detail,
        trigger: event
      })
    );
  }
}

class SourceSelection {
  constructor(_domSources, _media, _loader) {
    this.l = _domSources;
    this.j = _media;
    this.k = _loader;
    const HLS_LOADER = new HLSProviderLoader(), VIDEO_LOADER = new VideoProviderLoader(), AUDIO_LOADER = new AudioProviderLoader();
    this.Ie = computed(() => {
      return _media.$props.preferNativeHLS() ? [VIDEO_LOADER, AUDIO_LOADER, HLS_LOADER] : [HLS_LOADER, VIDEO_LOADER, AUDIO_LOADER];
    });
    effect(this.Ke.bind(this));
    effect(this.Le.bind(this));
    effect(this.Me.bind(this));
    effect(this.Ne.bind(this));
  }
  Ie;
  Ke() {
    this.j.delegate.p("sources-change", {
      detail: [...normalizeSrc(this.j.$props.src()), ...this.l()]
    });
  }
  Le() {
    const { $store } = this.j;
    const sources = $store.sources(), currentSource = peek($store.source), newSource = this.Je(currentSource, sources), noMatch = sources[0]?.src && !newSource.src && !newSource.type;
    if (noMatch) {
      const { crossorigin } = $store, credentials = getRequestCredentials(crossorigin()), abort = new AbortController();
      Promise.all(
        sources.map(
          (source) => isString(source.src) && source.type === "?" ? fetch(source.src, {
            method: "HEAD",
            credentials,
            signal: abort.signal
          }).then((res) => {
            source.type = res.headers.get("content-type") || "??";
            return source;
          }).catch(() => source) : source
        )
      ).then((sources2) => {
        if (abort.signal.aborted)
          return;
        this.Je(peek($store.source), sources2);
        tick();
      });
      return () => abort.abort();
    }
    tick();
  }
  Je(currentSource, sources) {
    let newSource = { src: "", type: "" }, newLoader = null;
    for (const src of sources) {
      const loader = peek(this.Ie).find((loader2) => loader2.canPlay(src));
      if (loader) {
        newSource = src;
        newLoader = loader;
      }
    }
    this.Oe(currentSource, newSource, newLoader);
    this.Pe(peek(this.k), newLoader);
    return newSource;
  }
  Oe(currentSource, newSource, newLoader) {
    if (newSource.src === currentSource.src && newSource.type === currentSource.type)
      return;
    this.j.delegate.p("source-change", { detail: newSource });
    this.j.delegate.p("media-type-change", {
      detail: newLoader?.mediaType(newSource) || "unknown"
    });
  }
  Pe(currentLoader, newLoader) {
    if (newLoader === currentLoader)
      return;
    this.j.delegate.p("provider-change", { detail: null });
    newLoader && peek(() => newLoader.preconnect?.(this.j));
    this.k.set(newLoader);
    this.j.delegate.p("provider-loader-change", { detail: newLoader });
  }
  Me() {
    const provider = this.j.$provider();
    if (!provider)
      return;
    if (this.j.$store.canLoad()) {
      peek(
        () => provider.setup({
          ...this.j,
          player: this.j.player
        })
      );
      return;
    }
    peek(() => provider.preconnect?.(this.j));
  }
  Ne() {
    const provider = this.j.$provider(), source = this.j.$store.source();
    if (this.j.$store.canLoad()) {
      peek(() => provider?.loadSource(source, peek(this.j.$store.preload)));
      return;
    }
    try {
      isString(source.src) && preconnect(new URL(source.src).origin, "preconnect");
    } catch (e) {
    }
  }
}
function normalizeSrc(src) {
  return (isArray(src) ? src : [!isString(src) && "src" in src ? src : { src }]).map(
    ({ src: src2, type }) => ({
      src: src2,
      type: type ?? (!isString(src2) || src2.startsWith("blob:") ? "video/object" : "?")
    })
  );
}

class Tracks {
  constructor(_domTracks, _media) {
    this.m = _domTracks;
    this.j = _media;
    effect(this.He.bind(this));
  }
  Ge = [];
  He() {
    const newTracks = [...this.j.$props.textTracks(), ...this.m()];
    for (const oldTrack of this.Ge) {
      if (!newTracks.some((t) => t.id === oldTrack.id)) {
        const track = oldTrack.id && this.j.textTracks.getById(oldTrack.id);
        if (track)
          this.j.textTracks.remove(track);
      }
    }
    for (const newTrack of newTracks) {
      const id = newTrack.id || TextTrack.createId(newTrack);
      if (!this.j.textTracks.getById(id)) {
        newTrack.id = id;
        this.j.textTracks.add(newTrack);
      }
    }
    this.Ge = newTracks;
  }
}

class Outlet extends Component {
  static el = defineElement({
    tagName: "media-outlet"
  });
  j;
  l = signal([]);
  m = signal([]);
  k = signal(null);
  constructor(instance) {
    super(instance);
    this.j = useMedia();
    new SourceSelection(this.l, this.j, this.k);
    new Tracks(this.m, this.j);
  }
  onAttach(el) {
    el.setAttribute("keep-alive", "");
  }
  onConnect(el) {
    const resize = new ResizeObserver(animationFrameThrottle(this.n.bind(this)));
    resize.observe(el);
    const mutation = new MutationObserver(this.o.bind(this));
    mutation.observe(el, { attributes: true, childList: true });
    if (IS_SAFARI) {
      listenEvent(el, "touchstart", (e) => e.preventDefault(), { passive: false });
    }
    scopedRaf(() => {
      this.n();
      this.o();
    });
    return () => {
      resize.disconnect();
      mutation.disconnect();
    };
  }
  onDestroy() {
    this.j.$store.currentTime.set(0);
  }
  n() {
    const player = this.j.player, width = this.el.offsetWidth, height = this.el.offsetHeight;
    if (!player)
      return;
    player.$store.mediaWidth.set(width);
    player.$store.mediaHeight.set(height);
    setStyle(player, "--media-width", width + "px");
    setStyle(player, "--media-height", height + "px");
  }
  o() {
    const sources = [], tracks = [], children = this.el.children;
    for (const el of children) {
      if (el instanceof HTMLSourceElement) {
        sources.push({
          src: el.src,
          type: el.type
        });
      } else if (el instanceof HTMLTrackElement) {
        tracks.push({
          id: el.id,
          src: el.src,
          kind: el.track.kind,
          language: el.srclang,
          label: el.label,
          default: el.default,
          type: el.getAttribute("data-type")
        });
      }
    }
    this.l.set(sources);
    this.m.set(tracks);
    tick();
  }
  render() {
    let currentProvider;
    onDispose(() => currentProvider?.destroy?.());
    return () => {
      currentProvider?.destroy();
      const loader = this.k();
      if (!loader)
        return null;
      const el = loader.render(this.j.$store);
      {
        peek(() => {
          loader.load(this.j).then((provider) => {
            if (peek(this.k) !== loader)
              return;
            this.j.delegate.p("provider-change", {
              detail: provider
            });
            currentProvider = provider;
          });
        });
      }
      return el;
    };
  }
}

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
  }
  priority = 1;
  za = null;
  ya = null;
  Aa = /(ssa|ass)$/;
  canRender(track) {
    return !!track.src && (isString(track.type) && this.Aa.test(track.type) || this.Aa.test(track.src));
  }
  attach(video) {
    this.loader().then(async (mod) => {
      this.za = new mod.default({
        ...this.config,
        video,
        subUrl: this.ya?.src || ""
      });
      listenEvent(this.za, "ready", () => {
        const canvas = this.za?.Ca;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this.za, "error", (event) => {
        if (this.ya) {
          this.ya[TEXT_TRACK_READY_STATE] = 3;
          this.ya.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this.Ba();
    } else if (this.ya !== track) {
      this.za?.setTrackByUrl(track.src);
      this.ya = track;
    }
  }
  detach() {
    this.Ba();
  }
  Ba() {
    this.za?.freeTrack();
    this.ya = null;
  }
}

class ARIAKeyShortcuts extends ComponentController {
  constructor(instance, _shortcut) {
    super(instance);
    this.ig = _shortcut;
  }
  onAttach(el) {
    const { $props, ariaKeys } = useMedia(), keys = el.getAttribute("aria-keyshortcuts");
    if (keys) {
      ariaKeys[this.ig] = keys;
      {
        onDispose(() => {
          delete ariaKeys[this.ig];
        });
      }
      return;
    }
    const shortcuts = $props.keyShortcuts()[this.ig];
    if (shortcuts)
      el.setAttribute("aria-keyshortcuts", shortcuts);
  }
}

export { canUseVideoPresentation as $, ARIAKeyShortcuts as A, MEDIA_ATTRIBUTES as B, canFullscreen as C, MediaRemoteControl as D, MediaRequestContext as E, ENABLE_AUTO_QUALITY as F, TextTrack as G, TEXT_TRACK_READY_STATE as H, IS_SAFARI as I, TEXT_TRACK_ON_MODE_CHANGE as J, SET_AUTO_QUALITY as K, LIST_SELECT as L, MediaStoreFactory as M, LIST_ADD as N, Outlet as O, IS_CHROME as P, coerceToError as Q, loadScript as R, ScreenOrientationController as S, TextTrackList as T, isHLSSupported as U, VideoQualityList as V, LIST_REMOVE as W, canPlayHLSNatively as X, TEXT_TRACK_NATIVE as Y, TEXT_TRACK_NATIVE_HLS as Z, canUsePictureInPicture as _, setAttributeIfEmpty as a, ATTACH_VIDEO as a0, MediaUserController as a1, MEDIA_KEY_SHORTCUTS as a2, List as a3, FullscreenController as a4, softResetMediaStore as a5, TimeRange as a6, getTimeRangesStart as a7, getTimeRangesEnd as a8, LibASSTextRenderer as a9, setARIALabel as b, findActiveCue as c, canChangeVolume as d, onTrackChapterChange as e, functionThrottle as f, isElementParent as g, isCueActive as h, isTrackCaptionKind as i, MediaStoreSync as j, AudioTrackList as k, TEXT_TRACK_CROSSORIGIN as l, mediaPlayerProps as m, TextRenderers as n, onPress as o, preconnect as p, mediaContext as q, MediaKeyboardController as r, scopedRaf as s, ThumbnailsLoader as t, useMedia as u, MediaStateManager as v, MediaRequestManager as w, MediaPlayerDelegate as x, MediaLoadController as y, IS_IPHONE as z };
